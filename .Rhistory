##### step 1: load hdrdata
dataDir = './data'
fileName = sprintf('%s/SDGdataset.cvs', dataDir)
hdrData = read.csv(fileName)
cat('Identified',nFiles,'header files.\n')
fileName
cd
getwd
getwd()
##### step 1: load hdrdata
dataDir = './data'
fileName = sprintf('%s/SDGdataset.cvs', dataDir)
hdrData = read.csv(fileName)
cat('Identified',nFiles,'header files.\n')
read.csv(fileName)
read.csv('data/SDGdataset')
read.csv('/Users/cdlab_admin/Documents/first_kick/wtw_individual_SDG/data/SDGdataset.csv')
sprintf('%s/SDGdataset.cvs', dataDir)
hdrData = read.csv(fileName)
hdrData = read.csv('data/SDGdataset.csv')
dataDir = 'data'
fileName = sprintf('%s/SDGdataset.cvs', dataDir)
hdrData = read.csv(fileName)
dataDir = 'data'
fileName = sprintf('%s/SDGdataset.cvs', dataDir)
hdrData = read.csv(fileName)
fileName
hdrData = read.csv('data/SDGdataset.cvs')
hdrData = read.csv('data/SDGdataset.csv')
fileName
fileName == 'data/SDGdataset.csv'
fileName
dataDir = 'data'
fileName = sprintf('%s/SDGdataset.csv', dataDir)
hdrData = read.csv('fileName)
hdrData = read.csv('fileName')
fileName = sprintf('%s/SDGdataset.csv', dataDir)
hdrData = read.csv(fileName)
View(hdrData)
ggplot(hdrData, aes(totalEarnings)) + geom_histogram(bins = 10) +
facet_wrap(~condition, nrow = 1) + xlab('Total earnings') + ylab("Num of blocks") + saveTheme + xlim(c(0, 600))
#
library('ggplot2')
library('dplyr')
ggplot(hdrData, aes(totalEarnings)) + geom_histogram(bins = 10) +
facet_wrap(~condition, nrow = 1) + xlab('Total earnings') + ylab("Num of blocks") + saveTheme + xlim(c(0, 600))
#
library('ggplot2')
library('dplyr')
source('subFxs/loadFxs.R')
source('subFxs/helperFxs.R')
source("subFxs/plotThemes.R")
source("subFxs/wtwSettings.R")
ggplot(hdrData, aes(totalEarnings)) + geom_histogram(bins = 10) +
facet_wrap(~condition, nrow = 1) + xlab('Total earnings') + ylab("Num of blocks") + saveTheme + xlim(c(0, 600))
View(hdrData)
View(hdrData)
groupData = hdrData[,1:10]
library('tidyr')
stocks <- tibble(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
View(stocks)
gather(stocks, stock, price, -time)
View(hdrData)
groupData = gather(hdrData[1:6], blockNum, AUC, -1:3)
colnames[hdrData]
colnames(hdrData)
groupData = gather(hdrData[1:6], blockNum, AUC, -SubjectID, -colnames(hdrData)[1:3])
colnames(hdrData)[1:3]
groupData = gather(hdrData[1:6], blockNum, AUC, -SubjectID, -SubjectID, -Condition)
groupData = gather(hdrData[1:6], blockNum, AUC, -SubjectID, -SubjectID, -Condition, 'Task..1...unif..2...gp.')
View(groupData)
groupData = gather(hdrData[1:6], blockNum, AUC, -SubjectID, -SubjectID, -Condition, -Task..1...unif..2...gp.)
View(groupData)
groupData$Condition
groupData$blockNum = apply(substr(groupData$blockNum, -1, -1))
groupData$blockNum = apply(groupData$blockNum, FUN = function(x) substr(x, -1, -1))
groupData$blockNum
groupData$blockNum[1]
a = groupData$blockNum[1]
substr(x, -1, -1)
substr(x, -1, -2)
substr(a, -1, -2)
substr(a, -1, -3)
substr(a, 3, 4)
substr(a, -2, -1)
substr(a, -1, -2)
substr(a, -3, -1)
substr(a, -3, -2)
sub_str(a, -1, -1)
library(stringr)
groupData$blockNum = apply(groupData$blockNum, FUN = function(x) sub_str(x, -1, -1))
groupData$blockNum = apply(groupData$blockNum, FUN = function(x) sub_str(x, -2, -1))
sub_str(a, -2, -1)
groupData$blockNum = apply(groupData$blockNum, FUN = function(x) str_sub(x, -2, -1))
str_sub(a, -2, -1)
str_sub(groupData$blockNum, 1, -1)
apply(as.matrix(groupData$blockNum), FUN = function(x) str_sub(x, -1, -1))
apply(as.matrix(groupData$blockNum), FUN = function(x) str_sub(x, -1, -1), MARGIN = 1)
suspend = gather(hdrData[7:9], blockNum, totalEarnings)
View(suspend)
View(hdrData)
suspend = gather(hdrData[9:10], blockNum, totalEarnings)
View(suspend)
# define data column names
colnames = c('blockNum', 'trialNum', 'trialStartTime', 'nKeyPresses', 'scheduledWait',
'rewardTime', 'timeWaited', 'sellTime', 'trialEarnings','totalEarnings')
# 'timeWaited' is from trial onset to keypress (includes RT)
# 'sellTime' is the keypress time relative to block onset.
# initialize
trialData = list()
# loop over individual subjects
for (fIdx in 1:nFiles) {
# extract the subject ID
thisID = hdrData$ID[fIdx]
thisCbal = hdrData$Cbal[fIdx]
thisFile = list.files(path=dataDir, pattern=(sprintf('wtw-work-3_%s_1.txt',thisID)))
if (length(thisFile) != 1) {
cat('Could not identify a single data file for subject',thisID,'\n')
browser()
}
# load the behavioral data file
d = read.csv(file.path(dataDir,thisFile), header=FALSE, col.names=colnames)
# add a column for subject ID.
d$id = thisID # this repeats the id in all rows
# filter blockNum < 3
d = d[d$blockNum < 3, ]
# add a column for the condition
# %   cb1: HP, passive-active
# %   cb2: HP, active-passive
# %   cb3: LP, passive-active
# %   cb4: LP, active-passive
if (thisCbal==1 | thisCbal == 2) {d$condition = 'HP'}
else {    d$condition = 'LP'}
if (thisCbal==1 | thisCbal == 3) {passiveIdx = (d$blockNum == 1)}
else  {passiveIdx  = (d$blockNum == 2)}
d$trial_function[passiveIdx] = 'passive'
d$trial_function[!passiveIdx] = 'active'
# add to the list of all subjects' data
trialData[[thisID]] = d
} # end of loop over subjects
# return the 2 data frames in a named list
outputData = list(hdrData=hdrData, trialData=trialData)
a = list.files(path=dataDir, pattern=('wtw_stress_DG*_*_*.txt'))
length(a)
a = list.files(path=dataDir, pattern=('wtw_stress_DG5_*_*.txt'))
length(a)
a = list.files(path=dataDir, pattern=glob2rx('wtw_stress_DG_*_*.txt'))
length(a)
a = list.files(path=dataDir, pattern=glob2rx('wtw_stress_*_*_*.txt'))
length(a)
a = list.files(path=dataDir, pattern=glob2rx('wtw_stress_DG?_*_*.txt'))
length(a)
allFileNames = list.files(path=dataDir, pattern=glob2rx('wtw_stress_SDG?_*_*.txt'))
nFiles = length(allFileNames)
View(hdrData)
nConds = apply( allFileNames, FUN = str_sub(x, -7, -7), MARGIN = 1)
nConds = apply( allFileNames, FUN = function(x) str_sub(x, -7, -7), MARGIN = 1)
nConds = apply( as.matrix(allFileNames), FUN = function(x) str_sub(x, -7, -7), MARGIN = 1)
nConds
as.matrix(allFileNames)
allFileNames = list.files(path=dataDir, pattern=glob2rx('wtw_stress_SDG?_*_*.txt'))
nFiles = length(allFileNames)
nConds = apply( as.matrix(allFileNames), FUN = function(x) str_sub(x, -7, -7), MARGIN = 1)
nFiles
allFileNames = list.files(path=dataDir, pattern=glob2rx('wtw_stress_SDG*_*_*.txt'))
nFiles = length(allFileNames)
nFiles =
nFiles
# we discard 3 files with the pattern "wtw_stress_DG5_*_*.txt"
allFileNames = list.files(path=dataDir, pattern=glob2rx('wtw_stress_SDG*_*_*.txt'))
nFiles = length(allFileNames)
nConds = length(unique(apply( as.matrix(allFileNames), FUN = function(x) str_sub(x, -7, -7), MARGIN = 1)))
View(hdrData)
dataDir = 'data'
fileName = sprintf('%s/SDGdataset.csv', dataDir)
summaryData= read.csv(fileName)
# organize hdrData
hdrData = summaryData[,-4:10]
hdrData = summaryData[,-(4:10)]
colnames(hdrData)
View(hdrData)
# load summary data
dataDir = 'data'
fileName = sprintf('%s/SDGdataset.csv', dataDir)
summaryData= read.csv(fileName)
# exclude AUC and totalEarnings from hdrData
hdrData = summaryData[,-(4:16)]
colnames(hdrData)
# exclude AUC and totalEarnings from hdrData
hdrData = summaryData[,-(4:17)]
hdrData = summaryData[,-(4:17)]
colnames(hdrData)
# load summary data
dataDir = 'data'
fileName = sprintf('%s/SDGdataset.csv', dataDir)
summaryData= read.csv(fileName)
# exclude AUC and totalEarnings from hdrData
hdrData = summaryData[,-(4:17)]
colnames(hdrData) = c('ID', 'stress', 'condition', 'cbal', 'perceivedStress',
'traitAnxiety', 'Gender', 'BDI', 'posAffect1', 'posAffect2',
'negAffect1', 'negAffect2', 'uncertainty', 'delay',
'impulsive', 'postUnpleasant')
nFile = nrow(summaryData)
nFile
allFileNames = list.files(path=dataDir, pattern=glob2rx('wtw_stress_SDG*_*_*.txt'))
nFiles = length(allFileNames)
nFiles
length(1,57,281.076,0,12.938,NaN,5.222,286.299,0,240
)
length(c(1,57,281.076,0,12.938,NaN,5.222,286.299,0,240))
View(hdrData)
View(summaryData)
##### step 1: organize hdrData
# load summary data
dataDir = 'data'
fileName = sprintf('%s/SDGdataset.csv', dataDir)
summaryData= read.csv(fileName)
# adjust
summaryData$stress = ifelse( summaryData$stress == 'stress', 'stress', 'no_stress')
summaryData$Task..1...unif..2...gp. = ifelse(summaryData$Task..1...unif..2...gp. == 1, 'HP', 'LP')
# exclude AUC and totalEarnings from hdrData
hdrData = summaryData[,-(4:17)]
colnames(hdrData) = c('ID', 'stress', 'condition', 'cbal', 'perceivedStress',
'traitAnxiety', 'Gender', 'BDI', 'posAffect1', 'posAffect2',
'negAffect1', 'negAffect2', 'uncertainty', 'delay',
'impulsive', 'postUnpleasant')
# count number of subjects
nSubjects = nrow(summaryData)
nBlocks = 3
d = vector(nBlocks, mode = list)
d = vector(nBlocks, mode = 'list')
rm(list = ls())
allData = loadAllData()
source('subFxs/loadFxs')
source('subFxs/loadFxs.R')
allData = loadAllData()
# load summary data
dataDir = 'data'
fileName = sprintf('%s/SDGdataset.csv', dataDir)
summaryData= read.csv(fileName)
# adjust
summaryData$stress = ifelse( summaryData$stress == 'stress', 'stress', 'no_stress')
summaryData$Task..1...unif..2...gp. = ifelse(summaryData$Task..1...unif..2...gp. == 1, 'HP', 'LP')
summaryData$stress == 'stress'
# load summary data
dataDir = 'data'
fileName = sprintf('%s/SDGdataset.csv', dataDir)
summaryData= read.csv(fileName)
# adjust
summaryData$stress = ifelse( summaryData$Condition == 'stress', 'stress', 'no_stress')
summaryData$Task..1...unif..2...gp. = ifelse(summaryData$Task..1...unif..2...gp. == 1, 'HP', 'LP')
# exclude AUC and totalEarnings from hdrData
hdrData = summaryData[,-(4:17)]
colnames(hdrData) = c('ID', 'stress', 'condition', 'cbal', 'perceivedStress',
'traitAnxiety', 'Gender', 'BDI', 'posAffect1', 'posAffect2',
'negAffect1', 'negAffect2', 'uncertainty', 'delay',
'impulsive', 'postUnpleasant')
# count number of subjects
nSubjects = nrow(summaryData)
nBlocks = 3
##### step 2: load trialData
# define data column names
colnames = c('blockNum', 'trialNum', 'trialStartTime', 'nKeyPresses', 'scheduledWait',
'rewardTime', 'timeWaited', 'sellTime', 'trialEarnings','totalEarnings')
# 'timeWaited' is from trial onset to keypress (includes RT)
# 'sellTime' is the keypress time relative to block onset.
# initialize
trialData = list()
# loop over individual subjects
for (sIdx in 1:nSubjects) {
thisID = hdrData$ID[sIdx]
thisCbal = hdrData$Cbal[sIdx]
thisCond = hdrData$condition[sIdx]
thisStress = hdrData$stress[sIdx]
# loop over blocks
junk = vector(nBlocks, mode = 'list')
for (bkIdx in 1 : nBlocks){
thisFile = list.files(path=dataDir, pattern=(sprintf('wtw_stress_SDG%d_bk$d_1.txt',thisID, bkIdx)))
if (length(thisFile) != 1) {
cat('Could not identify a single data file for subject',thisID,' block', bkIdx, '\n')
browser()
}
junk[[cIdx]] = read.csv(file.path(dataDir,thisFile), header=FALSE, col.names=colnames)
# adjust blockNum
junk[[cIdx]]$blockNum = d$blockNum * bkIdx
}
d = rbind(junk[[1]], junk[[2]], junk[[3]])
# add info from hdrData
d$condition = rep(thisCond, nrow(d))
d$stress = rep(thisStress, nrow(d))
# add to the list of all subjects' data
trialData[[thisID]] = d
} # end of loop over subjects
q
quit
weq
weqwe
list.files(path=dataDir, pattern=(sprintf('wtw_stress_SDG%d_bk$d_1.txt',thisID, bkIdx)))
list.files(path=dataDir, pattern=(sprintf('wtw_stress_SDG%d_bk$d_1.txt',thisID, bkIdx)))
# loop over individual subjects
for (sIdx in 1:nSubjects) {
thisID = hdrData$ID[sIdx]
thisCbal = hdrData$Cbal[sIdx]
thisCond = hdrData$condition[sIdx]
thisStress = hdrData$stress[sIdx]
# loop over blocks
junk = vector(nBlocks, mode = 'list')
for (bkIdx in 1 : nBlocks){
thisFile = list.files(path=dataDir, pattern=(sprintf('wtw_stress_SDG%d_bk%d_1.txt',thisID, bkIdx)))
if (length(thisFile) != 1) {
cat('Could not identify a single data file for subject',thisID,' block', bkIdx, '\n')
browser()
}
junk[[cIdx]] = read.csv(file.path(dataDir,thisFile), header=FALSE, col.names=colnames)
# adjust blockNum
junk[[cIdx]]$blockNum = d$blockNum * bkIdx
}
d = rbind(junk[[1]], junk[[2]], junk[[3]])
# add info from hdrData
d$condition = rep(thisCond, nrow(d))
d$stress = rep(thisStress, nrow(d))
# add to the list of all subjects' data
trialData[[thisID]] = d
} # end of loop over subjects
for (sIdx in 1:nSubjects) {
thisID = hdrData$ID[sIdx]
thisCbal = hdrData$Cbal[sIdx]
thisCond = hdrData$condition[sIdx]
thisStress = hdrData$stress[sIdx]
# loop over blocks
junk = vector(nBlocks, mode = 'list')
for (bkIdx in 1 : nBlocks){
thisFile = list.files(path=dataDir, pattern=(sprintf('wtw_stress_SDG%d_bk%d_1.txt',thisID, bkIdx)))
if (length(thisFile) != 1) {
cat('Could not identify a single data file for subject',thisID,' block', bkIdx, '\n')
browser()
}
junk[[bkIdx]] = read.csv(file.path(dataDir,thisFile), header=FALSE, col.names=colnames)
# adjust blockNum
junk[[bkIdx]]$blockNum = d$blockNum * bkIdx
}
d = rbind(junk[[1]], junk[[2]], junk[[3]])
# add info from hdrData
d$condition = rep(thisCond, nrow(d))
d$stress = rep(thisStress, nrow(d))
# add to the list of all subjects' data
trialData[[thisID]] = d
} # end of loop over subjects
d = rbind(junk[[1]], junk[[2]], junk[[3]])
d$condition = rep(thisCond, nrow(d))
d$stress = rep(thisStress, nrow(d))
trialData[[thisID]] = d
rm(list = ls())
source('subFxs/loadFxs.R')
allData = loadAllData()
thisFile
allData = loadAllData()
thisFile
allData = loadAllData()
allData = loadAllData()
thisFile
allData = loadAllData()
###### load data and functions #######
source('subFxs/helperFxs.R')
library('ggplot2')
source('subFxs/plotThemes.R')
source('subFxs/wtwSettings.R')
source("subFxs/actionValueViewer.R")
load('outputs/QStarData/colpData.RData')
load('outputs/QStarData/RawHPData.RData')
load('outputs/QStarData/RawLPData.RData')
###### choose condition ########3
condIdx = 2
cond = conditions[condIdx]
condName = conditionNames[condIdx]
inputColp = if(condName == 'HP') inputColp = colpHPData else inputColp = colpLPData
inputRaw = if(condName == 'HP') inputRaw = rawHPData else inputRaw= rawLPData
tMax = tMaxs[condIdx]
trialTick = trialTicks[[condIdx]] # so here if use [2] then get a list
####### view simulation data case by case ##########
# choose cases you want to plot
nCombList = which(inputColp$AUC <= 6 & inputColp$AUC >= 2 )
# choose figrues you want to plot
plotTrialData = F
plotKMSC= T
drawTimeSample = T
plotActionValue = T
# plot
for (nCb in 1 : length(nCombList)){
i = nCombList[nCb]
j = 1
# prepare total earnings, wtw and AUC
totalEarnings = inputColp$totalEarnings[i]
wtw = inputColp$wtw[i]
AUC = inputColp$AUC[i]
label = sprintf('colp stat, earn: %d, wtw: %.2f, AUC: %.2f',
totalEarnings, wtw, AUC)
# block data
blockData = data.frame(trialEarnings = inputRaw$trialEarnings[i,j,],
scheduledWait = inputRaw$rewardDelays[i,j,],
timeWaited = inputRaw$timeWaited[i,j,],
trialNum = 1 : length(inputRaw$timeWaited[i,j,])
)
waitDuration = blockData$timeWaited
waitDuration[is.na(waitDuration)] = blockData$scheduledWait[is.na(waitDuration)]
blockData$waitDuration = waitDuration
endTick = match(0, inputRaw$rewardDelays[i,j,]) - 1
blockData = blockData[1:endTick, ]
if(plotTrialData){
# plot
trialPlots(blockData, label)
}
if(plotTrialData) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# look at kmsc
if(plotKMSC){
# change name
rewardDelay = blockData$scheduledWait
quitIdx = (blockData$trialEarnings == 0)
kmscResults = kmscSimple(blockData$waitDuration, quitIdx, tMax, trialTick)
plotData = data.frame(pSurvival = kmscResults$kmOnGrid, time = trialTicks[[condName]])
p = ggplot(plotData, aes(time, pSurvival)) + geom_line() + ylim(c(0, 1)) + displayTheme +
ggtitle(label)
print(p)
}
if(plotKMSC) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# draw wait duration distribution
if(drawTimeSample){
# prepare pdf
cdf = 1 - kmscResults$kmOnGrid;
cdf[length(cdf)] = 1
pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
draws = sample(trialTicks[[condName]], size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram(bins = 50) + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)
print(p)
}
if(drawTimeSample) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# plot action value
# prepare data
if(plotActionValue){
vaWaits = inputRaw$vaWaits[i,j, , ]
vaQuits = inputRaw$vaQuits[i,j, , ]
actionValueViewer(vaWaits, vaQuits, blockData)
}
if(plotActionValue) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
