quitIdx = (blockData$trialEarnings == 0)
kmscResults = kmscSimple(blockData$waitDuration, quitIdx, tMax, trialTick)
plotData = data.frame(pSurvival = kmscResults$kmOnGrid, time = trialTicks[[condName]])
p = ggplot(plotData, aes(time, pSurvival)) + geom_line() + ylim(c(0, 1)) + displayTheme +
ggtitle(label)
print(p)
}
if(plotKMSC) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# draw wait duration distribution
if(drawTimeSample){
# prepare pdf
cdf = 1 - kmscResults$kmOnGrid;
cdf[length(cdf)] = 1
pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
draws = sample(trialTicks[[condName]], size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram(bins = 50) + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)
print(p)
}
if(drawTimeSample) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# plot action value
# prepare data
if(plotActionValue){
para = initialSpace[i, ]
vaWaits = inputRaw$vaWaits[i,j, , ]
vaQuits = inputRaw$vaQuits[i,j, , ]
actionValueViewer(vaWaits, vaQuits, blockData, para)
}
if(plotActionValue) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
####### view simulation data case by case ##########
# choose cases you want to plot
nCombList = which(inputColp$AUC <= 6 & inputColp$AUC >= 2 )
nCombList = 20;
# choose figrues you want to plot
plotTrialData = F
plotKMSC= T
drawTimeSample = T
plotActionValue = F
# plot
for (nCb in 1 : length(nCombList)){
i = nCombList[nCb]
j = 2
# prepare total earnings, wtw and AUC
totalEarnings = inputColp$totalEarnings[i]
wtw = inputColp$wtw[i]
AUC = inputColp$AUC[i]
label = sprintf('colp stat, earn: %d, wtw: %.2f, AUC: %.2f',
totalEarnings, wtw, AUC)
# block data
blockData = data.frame(trialEarnings = inputRaw$trialEarnings[i,j,],
scheduledWait = inputRaw$rewardDelays[i,j,],
timeWaited = inputRaw$timeWaited[i,j,],
trialNum = 1 : length(inputRaw$timeWaited[i,j,])
)
waitDuration = blockData$timeWaited
waitDuration[is.na(waitDuration)] = blockData$scheduledWait[is.na(waitDuration)]
blockData$waitDuration = waitDuration
endTick = match(0, inputRaw$rewardDelays[i,j,]) - 1
blockData = blockData[1:endTick, ]
if(plotTrialData){
# plot
trialPlots(blockData, label)
}
if(plotTrialData) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# look at kmsc
if(plotKMSC){
# change name
rewardDelay = blockData$scheduledWait
quitIdx = (blockData$trialEarnings == 0)
kmscResults = kmscSimple(blockData$waitDuration, quitIdx, tMax, trialTick)
plotData = data.frame(pSurvival = kmscResults$kmOnGrid, time = trialTicks[[condName]])
p = ggplot(plotData, aes(time, pSurvival)) + geom_line() + ylim(c(0, 1)) + displayTheme +
ggtitle(label)
print(p)
}
if(plotKMSC) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# draw wait duration distribution
if(drawTimeSample){
# prepare pdf
cdf = 1 - kmscResults$kmOnGrid;
cdf[length(cdf)] = 1
pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
draws = sample(trialTicks[[condName]], size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram(bins = 50) + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)
print(p)
}
if(drawTimeSample) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# plot action value
# prepare data
if(plotActionValue){
para = initialSpace[i, ]
vaWaits = inputRaw$vaWaits[i,j, , ]
vaQuits = inputRaw$vaQuits[i,j, , ]
actionValueViewer(vaWaits, vaQuits, blockData, para)
}
if(plotActionValue) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
####### view simulation data case by case ##########
# choose cases you want to plot
nCombList = which(inputColp$AUC <= 6 & inputColp$AUC >= 2 )
nCombList = 100;
# choose figrues you want to plot
plotTrialData = F
plotKMSC= T
drawTimeSample = T
plotActionValue = F
# plot
for (nCb in 1 : length(nCombList)){
i = nCombList[nCb]
j = 1
# prepare total earnings, wtw and AUC
totalEarnings = inputColp$totalEarnings[i]
wtw = inputColp$wtw[i]
AUC = inputColp$AUC[i]
label = sprintf('colp stat, earn: %d, wtw: %.2f, AUC: %.2f',
totalEarnings, wtw, AUC)
# block data
blockData = data.frame(trialEarnings = inputRaw$trialEarnings[i,j,],
scheduledWait = inputRaw$rewardDelays[i,j,],
timeWaited = inputRaw$timeWaited[i,j,],
trialNum = 1 : length(inputRaw$timeWaited[i,j,])
)
waitDuration = blockData$timeWaited
waitDuration[is.na(waitDuration)] = blockData$scheduledWait[is.na(waitDuration)]
blockData$waitDuration = waitDuration
endTick = match(0, inputRaw$rewardDelays[i,j,]) - 1
blockData = blockData[1:endTick, ]
if(plotTrialData){
# plot
trialPlots(blockData, label)
}
if(plotTrialData) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# look at kmsc
if(plotKMSC){
# change name
rewardDelay = blockData$scheduledWait
quitIdx = (blockData$trialEarnings == 0)
kmscResults = kmscSimple(blockData$waitDuration, quitIdx, tMax, trialTick)
plotData = data.frame(pSurvival = kmscResults$kmOnGrid, time = trialTicks[[condName]])
p = ggplot(plotData, aes(time, pSurvival)) + geom_line() + ylim(c(0, 1)) + displayTheme +
ggtitle(label)
print(p)
}
if(plotKMSC) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# draw wait duration distribution
if(drawTimeSample){
# prepare pdf
cdf = 1 - kmscResults$kmOnGrid;
cdf[length(cdf)] = 1
pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
draws = sample(trialTicks[[condName]], size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram(bins = 50) + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)
print(p)
}
if(drawTimeSample) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# plot action value
# prepare data
if(plotActionValue){
para = initialSpace[i, ]
vaWaits = inputRaw$vaWaits[i,j, , ]
vaQuits = inputRaw$vaQuits[i,j, , ]
actionValueViewer(vaWaits, vaQuits, blockData, para)
}
if(plotActionValue) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
cond
# choose cases you want to plot
nCombList = which(inputColp$AUC <= 6 & inputColp$AUC >= 2 )
nCombList = 1;
# choose figrues you want to plot
plotTrialData = F
plotKMSC= T
drawTimeSample = T
plotActionValue = F
# plot
for (nCb in 1 : length(nCombList)){
i = nCombList[nCb]
j = 1
# prepare total earnings, wtw and AUC
totalEarnings = inputColp$totalEarnings[i]
wtw = inputColp$wtw[i]
AUC = inputColp$AUC[i]
label = sprintf('colp stat, earn: %d, wtw: %.2f, AUC: %.2f',
totalEarnings, wtw, AUC)
# block data
blockData = data.frame(trialEarnings = inputRaw$trialEarnings[i,j,],
scheduledWait = inputRaw$rewardDelays[i,j,],
timeWaited = inputRaw$timeWaited[i,j,],
trialNum = 1 : length(inputRaw$timeWaited[i,j,])
)
waitDuration = blockData$timeWaited
waitDuration[is.na(waitDuration)] = blockData$scheduledWait[is.na(waitDuration)]
blockData$waitDuration = waitDuration
endTick = match(0, inputRaw$rewardDelays[i,j,]) - 1
blockData = blockData[1:endTick, ]
if(plotTrialData){
# plot
trialPlots(blockData, label)
}
if(plotTrialData) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# look at kmsc
if(plotKMSC){
# change name
rewardDelay = blockData$scheduledWait
quitIdx = (blockData$trialEarnings == 0)
kmscResults = kmscSimple(blockData$waitDuration, quitIdx, tMax, trialTick)
plotData = data.frame(pSurvival = kmscResults$kmOnGrid, time = trialTicks[[condName]])
p = ggplot(plotData, aes(time, pSurvival)) + geom_line() + ylim(c(0, 1)) + displayTheme +
ggtitle(label)
print(p)
}
if(plotKMSC) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# draw wait duration distribution
if(drawTimeSample){
# prepare pdf
cdf = 1 - kmscResults$kmOnGrid;
cdf[length(cdf)] = 1
pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
draws = sample(trialTicks[[condName]], size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram(bins = 50) + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)
print(p)
}
if(drawTimeSample) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# plot action value
# prepare data
if(plotActionValue){
para = initialSpace[i, ]
vaWaits = inputRaw$vaWaits[i,j, , ]
vaQuits = inputRaw$vaQuits[i,j, , ]
actionValueViewer(vaWaits, vaQuits, blockData, para)
}
if(plotActionValue) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
para = initialSpace[,1]
para
initialSpace[1,]
# this script analysized the simulation data on the group level
############ load data and functions #########
# library
library("ggplot2")
library("dplyr")
library("tidyr")
library('scales')
source(file = './subFxs/plotThemes.R')
source(file = './subFxs/wtwSettings.R')
# load the para space of the simulation
load('outputs/QStarData/initialSpace.RData')
# load simulation data
load('outputs/QStarData/colpData.RData')
load('outputs/QStarData/rawWTW.RData')
load('outputs/QStarData/hdrData.RData')
# define output file
outFile = 'outputs/QStar_figures'
dir.create(outFile)
library('lme4')
install.packages('lme4', dependencies = T)
dim(colpHPData$AUC )
length(colpHPData$AUC )
load('outputs/QStarData/rawHPData.RData')
library('lme4')
linearData = initialSpace;
linearData$AUC = colpHPData$AUC
linearData = as.data.frame(initialSpace);
linearData$AUC = colpHPData$AUC
View(linearData)
linearData = as.data.frame(initialSpace);
colnames(linearData) = c('phi', 'tau', 'gamma', 'lambda', 'wIni')
linearData$AUC = colpHPData$AUC
lm(AUC ~ phi + tau + wIni + gamma + lambda, data = linearData)
fit = lm(AUC ~ phi + tau + wIni + gamma + lambda, data = linearData)
summary(fit)
lapply(linearData[, colnames(linearData)], scale)
linearData = lapply(linearData[, colnames(linearData)], scale)
View(linearData)
fit = lm(AUC ~ phi + tau + wIni + gamma + lambda, data = linearData)
summary(fit)
# this script analysized the simulation data on the group level
############ load data and functions #########
# library
library("ggplot2")
library("dplyr")
library("tidyr")
library('scales')
source(file = './subFxs/plotThemes.R')
source(file = './subFxs/wtwSettings.R')
# load the para space of the simulation
load('outputs/QStarData/initialSpace.RData')
# load simulation data
load('outputs/QStarData/colpData.RData')
load('outputs/QStarData/rawWTW.RData')
load('outputs/QStarData/hdrData.RData')
# define output file
outFile = 'outputs/QStar_figures'
dir.create(outFile)
paraValues = seq(0.2, 0.8, 0.3)
summaryData = data.frame(condition = rep(c("HP", "LP"), each = nValue, nPara),
paraNames = rep(paraNames, each = nValue * 2),
paraValues = rep(paraValues, nPara * 2))
summaryData$paraNames = factor(summaryData$paraNames, levels = paraNames)
View(summaryData)
tempt = summarise_all(group_by(plotData, condition, phi), mu, std)
plotData = data.frame(totalEarnings = c(colpHPData$totalEarnings, colpLPData$totalEarnings),
condition = rep(c("HP", "LP"), each = nComb), phi = initialSpace[,1],
tau = initialSpace[,2], gamma = initialSpace[,3],
lambda = initialSpace[,4], wIni = initialSpace[,5]
)
tempt = summarise_all(group_by(plotData, condition, phi), mu, std)
tempt = summarise_all(group_by(plotData, condition, phi), mu, sd)
############ summarise para effects on total earnings ###########
paraValues = seq(0.2, 0.8, 0.3)
summaryData = data.frame(condition = rep(c("HP", "LP"), each = nValue, nPara),
paraNames = rep(paraNames, each = nValue * 2),
paraValues = rep(paraValues, nPara * 2))
summaryData$paraNames = factor(summaryData$paraNames, levels = paraNames)
# summarise mu and sd
mu = rep(NA, nrow(summaryData))
std = rep(NA, nrow(summaryData))
tempt = summarise_all(group_by(plotData, condition, phi), mu, sd)
paraValues = seq(0.2, 0.8, 0.3)
summaryData = data.frame(condition = rep(c("HP", "LP"), each = nValue, nPara),
paraNames = rep(paraNames, each = nValue * 2),
paraValues = rep(paraValues, nPara * 2))
summaryData$paraNames = factor(summaryData$paraNames, levels = paraNames)
# summarise mu and sd
mu = rep(NA, nrow(summaryData))
std = rep(NA, nrow(summaryData))
tempt = summarise_all(group_by(plotData, condition, phi), mu)
tempt = summarise_all(plotData, mu)
tempt = summarise_all(group_by(plotData, condition, phi), mean)
View(tempt)
plotData = data.frame(totalEarnings = c(colpHPData$totalEarnings, colpLPData$totalEarnings),
AUC = c(colpHPData$AUC, colpLPData$AUC),
condition = rep(c("HP", "LP"), each = nComb), phi = initialSpace[,1],
tau = initialSpace[,2], gamma = initialSpace[,3],
lambda = initialSpace[,4], wIni = initialSpace[,5]
)
# summarise mu and sd
mu = rep(NA, nrow(summaryData))
std = rep(NA, nrow(summaryData))
tempt = summarise_all(group_by(plotData, condition, phi), mean, cols = c('AUC', 'totalEarnings'))
View(tempt)
tempt = summarise_at(group_by(plotData, condition, phi), mean, cols = c('AUC', 'totalEarnings'))
mu = rep(NA, nrow(summaryData))
std = rep(NA, nrow(summaryData))
tempt = summarise_at(group_by(plotData, condition, phi), vars(AUC:totalEarnings), mean)
View(tempt)
tempt = summarise_at(group_by(plotData, condition, phi), vars(AUC:totalEarnings), mean, sd)
View(tempt)
# summarise mu and sd
mu = rep(NA, nrow(summaryData))
std = rep(NA, nrow(summaryData))
muByPhi = summarise_at(group_by(plotData, condition, phi), vars(AUC:totalEarnings), mean)
muByTau = summarise_at(group_by(plotData, condition, tau), vars(AUC:totalEarnings), mean)
muByGamma = summarise_at(group_by(plotData, condition, gamma), vars(AUC:totalEarnings), mean)
muByLambda = summarise_at(group_by(plotData, condition, lambda), vars(AUC:totalEarnings), mean)
muByWini= summarise_at(group_by(plotData, condition, wIni), vars(AUC:totalEarnings), mean)
mu = rbind(muByPhi, muByTau, muByGamma, muByLambda, muByWini)
mu = mu[, 3:4]
View(mu)
paraValues = seq(0.2, 0.8, 0.3)
paraData = data.frame(condition = rep(c("HP", "LP"), each = nValue, nPara),
paraNames = rep(paraNames, each = nValue * 2),
paraValues = rep(paraValues, nPara * 2))
paraData$paraNames = factor(summaryData$paraNames, levels = paraNames)
# summarise mu
muByPhi = summarise_at(group_by(plotData, condition, phi), vars(AUC:totalEarnings), mean)
muByTau = summarise_at(group_by(plotData, condition, tau), vars(AUC:totalEarnings), mean)
muByGamma = summarise_at(group_by(plotData, condition, gamma), vars(AUC:totalEarnings), mean)
muByLambda = summarise_at(group_by(plotData, condition, lambda), vars(AUC:totalEarnings), mean)
muByWini= summarise_at(group_by(plotData, condition, wIni), vars(AUC:totalEarnings), mean)
# summarise sd
stdByPhi = summarise_at(group_by(plotData, condition, phi), vars(AUC:totalEarnings), sd)
stdByTau = summarise_at(group_by(plotData, condition, tau), vars(AUC:totalEarnings), sd)
stdByGamma = summarise_at(group_by(plotData, condition, gamma), vars(AUC:totalEarnings), sd)
stdByLambda = summarise_at(group_by(plotData, condition, lambda), vars(AUC:totalEarnings), sd)
stdByWini= summarise_at(group_by(plotData, condition, wIni), vars(AUC:totalEarnings), sd)
#
mu = rbind(muByPhi, muByTau, muByGamma, muByLambda, muByWini);
mu = mu[, 3:4]
std = rbin(stdByPhi, muByTau, muByGamma, muByLambda, muByWini)
std = std[,3:4]
max= mu + std
min = mu -std
summaryData = cbind(paraData, mu, std, max, min);
std = rbind(stdByPhi, muByTau, muByGamma, muByLambda, muByWini)
std = std[,3:4]
max= mu + std
min = mu -std
summaryData = cbind(paraData, mu, std, max, min);
View(mu)
summaryEarnData = cbind(paraData, mu[,2], std[,2], max[,2], min[,2]);
summaryAUCData = cbind(paraData, mu[,1], std[,1], max[,1], min[,1]);
colnames(summaryEarnData) = c(colnames(paraData), 'mu', 'std', 'max', 'min')
colnames(summaryAUCData) = c(colnames(paraData), 'mu', 'std', 'max', 'min')
# plot
for(c in 1:2){
cond = conditionNames[c]
ggplot(summaryEarnData[summaryEarnData$condition == cond,], aes(factor(paraValues), mu)) +
geom_bar(stat = "identity", width=0.5, fill = conditionColors[c]) + geom_errorbar(aes(ymin = ymin, ymax = ymax), width=.2)+
facet_wrap(~paraNames, nrow = 1)+ saveTheme +
xlab("Parameter value") + ylab("Total Earnings") + ggtitle(cond)
fileName = file.path(outFile, sprintf("paraEffect%s.pdf", cond))
ggsave(fileName, width = 16, height = 8)
}
for(c in 1:2){
cond = conditionNames[c]
ggplot(summaryEarnData[summaryEarnData$condition == cond,], aes(factor(paraValues), mu)) +
geom_bar(stat = "identity", width=0.5, fill = conditionColors[c]) + geom_errorbar(aes(ymin = min, ymax = max), width=.2)+
facet_wrap(~paraNames, nrow = 1)+ saveTheme +
xlab("Parameter value") + ylab("Total Earnings") + ggtitle(cond)
fileName = file.path(outFile, sprintf("paraEffect%s.pdf", cond))
ggsave(fileName, width = 16, height = 8)
}
#
mu = rbind(muByPhi, muByTau, muByGamma, muByLambda, muByWini);
mu = mu[, 3:4]
std = rbind(stdByPhi, stdByTau, stdByGamma, stdByLambda, stdByWini)
std = std[,3:4]
max= mu + std
min = mu -std
summaryEarnData = cbind(paraData, mu[,2], std[,2], max[,2], min[,2]);
summaryAUCData = cbind(paraData, mu[,1], std[,1], max[,1], min[,1]);
colnames(summaryEarnData) = c(colnames(paraData), 'mu', 'std', 'max', 'min')
colnames(summaryAUCData) = c(colnames(paraData), 'mu', 'std', 'max', 'min')
# plot
for(c in 1:2){
cond = conditionNames[c]
ggplot(summaryEarnData[summaryEarnData$condition == cond,], aes(factor(paraValues), mu)) +
geom_bar(stat = "identity", width=0.5, fill = conditionColors[c]) + geom_errorbar(aes(ymin = min, ymax = max), width=.2)+
facet_wrap(~paraNames, nrow = 1)+ saveTheme +
xlab("Parameter value") + ylab("Total Earnings") + ggtitle(cond)
fileName = file.path(outFile, sprintf("paraEffect%s.pdf", cond))
ggsave(fileName, width = 16, height = 8)
}
# plot
for(c in 1:2){
cond = conditionNames[c]
ggplot(summaryAUCData[summaryAUCData$condition == cond,], aes(factor(paraValues), mu)) +
geom_bar(stat = "identity", width=0.5, fill = conditionColors[c]) + geom_errorbar(aes(ymin = min, ymax = max), width=.2)+
facet_wrap(~paraNames, nrow = 1)+ saveTheme +
xlab("Parameter value") + ylab("AUC / s") + ggtitle(cond)
fileName = file.path(outFile, sprintf("paraAUCEffect%s.pdf", cond))
ggsave(fileName, width = 16, height = 8)
}
summaryEarnData = cbind(paraData, mu[,2], std[,2], max[,2], min[,2]);
summaryAUCData = cbind(paraData, mu[,1], std[,1], max[,1], min[,1]);
colnames(summaryEarnData) = c(colnames(paraData), 'mu', 'std', 'max', 'min')
colnames(summaryAUCData) = c(colnames(paraData), 'mu', 'std', 'max', 'min')
# plot
for(c in 1:2){
cond = conditionNames[c]
ggplot(summaryAUCData[summaryAUCData$condition == cond,], aes(factor(paraValues), mu)) +
geom_bar(stat = "identity", width=0.5, fill = conditionColors[c]) + geom_errorbar(aes(ymin = min, ymax = max), width=.2)+
facet_wrap(~paraNames, nrow = 1)+ saveTheme +
xlab("Parameter value") + ylab("AUC / s") + ggtitle(cond)
fileName = file.path(outFile, sprintf("paraAUCEffect%s.pdf", cond))
ggsave(fileName, width = 16, height = 8)
}
linearData = as.data.frame(initialSpace);
colnames(linearData) = c('phi', 'tau', 'gamma', 'lambda', 'wIni')
linearData$AUC = colpHPData$AUC
linearData = lapply(linearData[, colnames(linearData)], scale)
fit = lm(AUC ~ phi + tau + wIni + gamma + lambda, data = linearData)
summary(fit)
initialSpace[1,]
initialSpace[,1]
linearData = as.data.frame(initialSpace);
colnames(linearData) = c('phi', 'tau', 'gamma', 'lambda', 'wIni')
linearData$AUC = colpHPData$AUC
summarise(group_by(linearData, phi), mu = mean(AUC))
fit = lm(AUC ~ phi + tau + wIni + gamma + lambda, data = linearData)
summary(fit)
summarise(group_by(linearData, phi), mu = mean(tau))
summarise(group_by(linearData, phi), mu = mean(lambda))
summarise(group_by(linearData, phi), mu = mean(gamma))
summarise(group_by(linearData, phi), mu = mean(wIni))
rm(list = ls())
source('~/Documents/first_kick/wtw_individual/simulation.R', echo=TRUE)
