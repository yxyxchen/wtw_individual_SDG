source('fixInputModel.R')
# load data
load('outputs/simData/initialSpace.RData')
# output files
dir.create('outputs/fixInputSimData')
dir.create('outputs/fixInputSim_figures')
############# calculate and save simualtion parameters #########
# run for N trials
nTrials = 50
nRep = 5
# determine reward delays
rewardDelays = list()
for(cIdx in 1 : 2){
# set.seed to make sure the reward delays and the simulations are reproduceble
set.seed(123)
cond = conditions[cIdx]
tempt = vector(length = nTrials)
for(i in 1 : nTrials){
tempt[i] = drawSample(cond)
}
rewardDelays[[cond]] = tempt
}
save('nTrials', 'nRep', 'rewardDelays', file = 'outputs/fixInputSimData/fixInputs.RData')
# define the condition
cond = conditions[cIdx]
# get otherPara given the condition
otherPara = getOtherPara(cond, stepDuration)
tMax = otherPara$tMax
#
thisRewardDelays = rewardDelays[[cond]]
# initialize outputs
TrialEarnings = array(dim = c(nValue^nPara, nRep, nTrials))
TimeWaited = array(dim = c(nValue^nPara, nRep, nTrials))
vaQuits = array(dim = c(nValue^nPara, nRep, tMax / stepDuration, nTrials))
vaWaits = array(dim = c(nValue^nPara, nRep, tMax / stepDuration, nTrials))
dvs = array(dim = c(nValue^nPara, nRep, tMax / stepDuration, nTrials)) # decision value, Qwait - Qquit, scaled within trials
# simulate for every para
i = 1
j =1
para = initialSpace[i, ]
wIni = wInis[[cond]][i]
tempt = fixInputModel(para, otherPara, cond, wIni, thisRewardDelays)
scale(vaWaits[i, j, ,  ] - vaWaits[i, j, ,  ])
dvs[i, j, , ] = scale(vaWaits[i, j, ,  ] - vaQuits[i, j, ,  ])
dvs[i, j, , ]
vaWaits[i, j, ,  ] - vaQuits[i, j, ,  ]
tempt = fixInputModel(para, otherPara, cond, wIni, thisRewardDelays)
junk = tempt[['trialEarnings']]
TrialEarnings[i, j, ] = junk[1 : nTrials]
junk =  tempt[['timeWaited']]
TimeWaited[i, j, ] = junk[1 : nTrials]
junk = tempt[['vaQuits']]
vaQuits[i, j,  , ] = transVaWaits(junk[, 1 : nTrials])
junk = tempt[['vaWaits']]
vaWaits[i, j, ,  ]  = transVaQuits(junk[, 1 : nTrials])
scale(vaWaits[i, j, ,  ] - vaQuits[i, j, ,  ])
vaQuits[i, j,  , ] = transVaQuits(junk[, 1 : nTrials])
junk = tempt[['vaWaits']]
vaWaits[i, j, ,  ]  = transVaWaits(junk[, 1 : nTrials])
scale(vaWaits[i, j, ,  ] - vaQuits[i, j, ,  ])
junk = scale(vaWaits[i, j, ,  ] - vaQuits[i, j, ,  ])
junk = scale(vaWaits[i, j, ,  ] - vaQuits[i, j, ,  ])
View(junk)
a = vaWaits[i, j, ,  ] - vaQuits[i, j, ,  ]
View(a)
a = vaWaits[i, j, ,  ]
tempt = fixInputModel(para, otherPara, cond, wIni, thisRewardDelays)
junk = tempt[['trialEarnings']]
TrialEarnings[i, j, ] = junk[1 : nTrials]
junk =  tempt[['timeWaited']]
TimeWaited[i, j, ] = junk[1 : nTrials]
junk = tempt[['vaQuits']]
a =  tempt[['vaQuits']]
View(a)
b = tempt[['vaWaits']]
View(b)
a = transVaQuits(tempt[['vaQuits']])
b = transVaWaits(tempt[['vaWaits']])
a - b
c = a - b
View(c)
tempt = fixInputModel(para, otherPara, cond, wIni, thisRewardDelays)
junk = tempt[['trialEarnings']]
TrialEarnings[i, j, ] = junk[1 : nTrials]
junk =  tempt[['timeWaited']]
TimeWaited[i, j, ] = junk[1 : nTrials]
junk = tempt[['vaQuits']]
vaQuits[i, j,  , ] = transVaQuits(junk[, 1 : nTrials])
junk = tempt[['vaWaits']]
vaWaits[i, j, ,  ]  = transVaWaits(junk[, 1 : nTrials])
c_p = vaWaits[i, j, ,  ] - vaQuits[i, j, ,  ]
View(c_p)
View(c)
dvs[i, j, , ] = scale(junk)
junk = scale(vaWaits[i, j, ,  ] - vaQuits[i, j, ,  ])
scale(junk)
e = scale(junk)
View(e)
dim(e)
dim(dvs[1,2,,])
dvs[i, j, , ] = scale(junk)
rm(list = ls())
# load stepDuration, scripts and libraries
stepDuration = 0.5
source('subFxs/wtwSettings.R') # wtw settings for both HP and LP
source('subFxs/paraFxs.R')
source('subFxs/taskFxs.R')
library('ggplot2')
library('dplyr')
library('tidyr')
source('fixInputModel.R')
# load data
load('outputs/simData/initialSpace.RData')
# output files
dir.create('outputs/fixInputSimData')
dir.create('outputs/fixInputSim_figures')
############# calculate and save simualtion parameters #########
# run for N trials
nTrials = 50
nRep = 5
# determine reward delays
rewardDelays = list()
for(cIdx in 1 : 2){
# set.seed to make sure the reward delays and the simulations are reproduceble
set.seed(123)
cond = conditions[cIdx]
tempt = vector(length = nTrials)
for(i in 1 : nTrials){
tempt[i] = drawSample(cond)
}
rewardDelays[[cond]] = tempt
}
save('nTrials', 'nRep', 'rewardDelays', file = 'outputs/fixInputSimData/fixInputs.RData')
################## simulation ##########
for(cIdx in 1 : 2){
# define the condition
cond = conditions[cIdx]
# get otherPara given the condition
otherPara = getOtherPara(cond, stepDuration)
tMax = otherPara$tMax
#
thisRewardDelays = rewardDelays[[cond]]
# initialize outputs
TrialEarnings = array(dim = c(nValue^nPara, nRep, nTrials))
TimeWaited = array(dim = c(nValue^nPara, nRep, nTrials))
vaQuits = array(dim = c(nValue^nPara, nRep, tMax / stepDuration, nTrials))
vaWaits = array(dim = c(nValue^nPara, nRep, tMax / stepDuration, nTrials))
dvs = array(dim = c(nValue^nPara, nRep, tMax / stepDuration, nTrials)) # decision value, Qwait - Qquit, scaled within trials
# simulate for every para
for(i in 1 : nComb){
para = initialSpace[i, ]
wIni = wInis[[cond]][i]
for(j in 1 : nRep){
tempt = fixInputModel(para, otherPara, cond, wIni, thisRewardDelays)
junk = tempt[['trialEarnings']]
TrialEarnings[i, j, ] = junk[1 : nTrials]
junk =  tempt[['timeWaited']]
TimeWaited[i, j, ] = junk[1 : nTrials]
junk = tempt[['vaQuits']]
vaQuits[i, j,  , ] = transVaQuits(junk[, 1 : nTrials])
junk = tempt[['vaWaits']]
vaWaits[i, j, ,  ]  = transVaWaits(junk[, 1 : nTrials])
# decision value
junk = scale(vaWaits[i, j, ,  ] - vaQuits[i, j, ,  ])
dvs[i, j, , ] = scale(junk)
}
}
# organize and save outputs
outputData = list("timeWaited" = TimeWaited, "trialEarnings" = TrialEarnings,
"vaWaits" = vaWaits, "vaQuits" = vaQuits, 'dvs' = dvs
)
if(cond == "HP"){
rawHPData = outputData
save(rawHPData,file = 'outputs/fixInputSimData/rawHPData.RData')
}else{
rawLPData = outputData
save(rawLPData,file = 'outputs/fixInputSimData/rawLPData.RData')
}
}
# this script collapses fix-input simualtion data on the para level
# load scripts, library and
source('subFxs/wtwSettings.R')
load('outputs/simData/initialSpace.RData')
load('outputs/fixInputSimData/rawHPData.RData')
load('outputs/fixInputSimData/rawLPData.RData')
load('outputs/fixInputSimData/fixInputs.RData')
library('dplyr')
library('tidyr')
source('subFxs/helperFxs.R')
################ compare waitDurations ##############
waitDelta = list()
dvDelta = list()
for(cIdx in 1 : 2){
cond = conditions[cIdx]
if(cond == 'HP') inputData = rawHPData
else  inputData = rawLPData
# initialize
thisWaitDelta = matrix(NA, nComb, nComb)
thisDvDelta = matrix(NA, nComb, nComb)
# across
for(i in 1 : (nComb - 1)){
for(j in (i + 1) : nComb){
thisWaitDelta[i, j] = mean(abs(inputData$timeWaited[i,1, ] - inputData$timeWaited[j,1,]))
thisWaitDelta[j, i] =  thisWaitDelta[i, j]
thisDvDelta[i, j] = mean(abs(inputData$dvs[i,1, , ] - inputData$dvs[j,1, , ]))
thisDvDelta[j, i]  = thisDvDelta[i, j]
}
}
# within
for(i in 1 : nComb){
thisWaitDelta[i, i] =  mean(abs(inputData$timeWaited[i,1, ] - inputData$timeWaited[i,2,]))
thisDvDelta[i, i] =  mean(abs(inputData$dvs[i,1, , ] - inputData$dvs[i,2, , ]))
}
# save
waitDelta[[cond]] = thisWaitDelta
dvDelta[[cond]] = thisDvDelta
}
############# withinPara #####
junk = vector(length = nComb)
waitWithinDelta = list(HP = junk, LP = junk)
dvWithinDelta = list(HP = junk, LP = junk)
for(i in 1 : nComb){
waitWithinDelta$HP[i] = waitDelta$HP[i,i]
waitWithinDelta$LP[i] = waitDelta$LP[i,i]
dvWithinDelta$HP[i] = dvDelta$HP[i,i]
dvWithinDelta$LP[i] = dvDelta$LP[i,i]
}
junk = vector(length = nComb)
waitAcrossDelta = list(HP = junk, LP = junk)
dvAcrossDelta = list(HP = junk, LP = junk)
for(i in 1 : nComb){
waitAcrossDelta$HP[i] = sum(waitDelta$HP[i,], na.rm = T) / (nComb - 1)
waitAcrossDelta$LP[i] = sum(waitDelta$LP[i,], na.rm = T) / (nComb - 1)
dvAcrossDelta$HP[i] = sum(dvDelta$HP[i,], na.rm = T) / (nComb - 1)
dvAcrossDelta$LP[i] = sum(dvDelta$LP[i,], na.rm = T) / (nComb - 1)
}
junk = vector(length = nComb)
waitSucessRecover = list(HP = junk, LP = junk)
dvSucessRecover = list(HP = junk, LP = junk)
for(i in 1 : nComb){
waitSucessRecover$HP[i] = sum(waitDelta$HP[i,i] < waitDelta$HP[i, 1 : nComb != i]) / (nComb - 1)
waitSucessRecover$LP[i]=  sum(waitDelta$LP[i,i] < waitDelta$LP[i, 1 : nComb != i]) / (nComb - 1)
dvSucessRecover$HP[i] = sum(dvDelta$HP[i,i] < dvDelta$HP[i, 1 : nComb != i]) / (nComb - 1)
dvSucessRecover$LP[i]=  sum(dvDelta$LP[i,i] < dvDelta$LP[i, 1 : nComb != i]) / (nComb - 1)
}
############# AUC ############
AUC = list()
for(c in 1 : 2){
cond = conditions[c];
# input
if(cond== "HP") inputData = rawHPData else inputData = rawLPData
tMax = tMaxs[c]
trialTick = trialTicks[[cond]]
# temporary output
output = matrix(NA, nComb, nRep)
for(i in 1 : nComb){
for(j in 1 : nRep){
waitDuration = inputData$timeWaited[i, j, ]
rewardDelay = rewardDelays[[cond]]
quitIdx = (inputData$trialEarnings[i, j, ] == 0)
output[i, j] = kmscSimple(waitDuration, quitIdx, tMax, trialTick)$auc
} # end of comb
}# end of condition
AUC[[cond]] = rowSums(output) / ncol(output)
}
########## save data #########
colpHPData = data.frame(waitSucessRecover  = waitSucessRecover$HP,
waitWithinDelta = waitWithinDelta$HP,
waitAcrossDelta = waitAcrossDelta$HP,
dvSucessRecover = dvSucessRecover$HP,
dvWithinDelta = dvWithinDelta$HP,
dvAcrossDelta = dvAcrossDelta$HP,
AUC = AUC$HP)
colpLPData = data.frame(waitSucessRecover  = waitSucessRecover$LP,
waitWithinDelta = waitWithinDelta$LP,
waitAcrossDelta = waitAcrossDelta$LP,
dvSucessRecover = dvSucessRecover$LP,
dvWithinDelta = dvWithinDelta$LP,
dvAcrossDelta = dvAcrossDelta$LP,
AUC = AUC$LP)
save('colpLPData', 'colpHPData', file = 'outputs/fixInputSimData/colpData.RData' )
rm(list = ls())
dvSucessRecover
# load scripts, library and
source('subFxs/wtwSettings.R')
load('outputs/simData/initialSpace.RData')
load('outputs/fixInputSimData/colpData.RData')
load('outputs/fixInputSimData/fixInputs.RData')
library('dplyr')
library('tidyr')
library('ggplot2')
source('subFxs/plotThemes.R')
source('subFxs/helperFxs.R')
colpHPData$dvSucessRecover
colpHPData$dvWithinDelta
rm(list = ls())
# load scripts, library and
source('subFxs/wtwSettings.R')
load('outputs/simData/initialSpace.RData')
load('outputs/fixInputSimData/rawHPData.RData')
load('outputs/fixInputSimData/rawLPData.RData')
load('outputs/fixInputSimData/fixInputs.RData')
library('dplyr')
library('tidyr')
source('subFxs/helperFxs.R')
################ compare waitDurations ##############
waitDelta = list()
dvDelta = list()
for(cIdx in 1 : 2){
cond = conditions[cIdx]
if(cond == 'HP') inputData = rawHPData
else  inputData = rawLPData
# initialize
thisWaitDelta = matrix(NA, nComb, nComb)
thisDvDelta = matrix(NA, nComb, nComb)
# across
for(i in 1 : (nComb - 1)){
for(j in (i + 1) : nComb){
thisWaitDelta[i, j] = mean(abs(inputData$timeWaited[i,1, ] - inputData$timeWaited[j,1,]))
thisWaitDelta[j, i] =  thisWaitDelta[i, j]
thisDvDelta[i, j] = mean(abs(inputData$dvs[i,1, , ] - inputData$dvs[j,1, , ]))
thisDvDelta[j, i]  = thisDvDelta[i, j]
}
}
# within
for(i in 1 : nComb){
thisWaitDelta[i, i] =  mean(abs(inputData$timeWaited[i,1, ] - inputData$timeWaited[i,2,]))
thisDvDelta[i, i] =  mean(abs(inputData$dvs[i,1, , ] - inputData$dvs[i,2, , ]))
}
# save
waitDelta[[cond]] = thisWaitDelta
dvDelta[[cond]] = thisDvDelta
}
View(dvDelta)
inputData$dvs[i,1, , ]
mean(abs(inputData$dvs[i,1, , ] - inputData$dvs[j,1, , ]))
a = abs(inputData$dvs[i,1, , ] - inputData$dvs[j,1, , ])
View(a)
a =  inputData$dvs[j,1, , ]
View(a)
j
inputData$dvs[j,1, , ]
a = inputData$dvs[j,1, , ]
View(a)
a = inputData$vaQuits[j,1,,]
View(a)
a = inputData$vaWaits[j,1,,]
View(a)
a = inputData$vaQuits[j,1,,]
View(a)
View(a)
rm(list = ls())
# load stepDuration, scripts and libraries
stepDuration = 0.5
source('subFxs/wtwSettings.R') # wtw settings for both HP and LP
source('subFxs/paraFxs.R')
source('subFxs/taskFxs.R')
library('ggplot2')
library('dplyr')
library('tidyr')
source('fixInputModel.R')
# load data
load('outputs/simData/initialSpace.RData')
# output files
dir.create('outputs/fixInputSimData')
dir.create('outputs/fixInputSim_figures')
############# calculate and save simualtion parameters #########
# run for N trials
nTrials = 50
nRep = 5
# determine reward delays
rewardDelays = list()
for(cIdx in 1 : 2){
# set.seed to make sure the reward delays and the simulations are reproduceble
set.seed(123)
cond = conditions[cIdx]
tempt = vector(length = nTrials)
for(i in 1 : nTrials){
tempt[i] = drawSample(cond)
}
rewardDelays[[cond]] = tempt
}
save('nTrials', 'nRep', 'rewardDelays', file = 'outputs/fixInputSimData/fixInputs.RData')
cIdx = 1
# define the condition
cond = conditions[cIdx]
# get otherPara given the condition
otherPara = getOtherPara(cond, stepDuration)
tMax = otherPara$tMax
#
thisRewardDelays = rewardDelays[[cond]]
# initialize outputs
TrialEarnings = array(dim = c(nValue^nPara, nRep, nTrials))
TimeWaited = array(dim = c(nValue^nPara, nRep, nTrials))
vaQuits = array(dim = c(nValue^nPara, nRep, tMax / stepDuration, nTrials))
vaWaits = array(dim = c(nValue^nPara, nRep, tMax / stepDuration, nTrials))
dvs = array(dim = c(nValue^nPara, nRep, tMax / stepDuration, nTrials)) # decision value, Qwait - Qquit, scaled within trials
# simulate for every para
i = 1
j = 1
para = initialSpace[i, ]
wIni = wInis[[cond]][i]
tempt = fixInputModel(para, otherPara, cond, wIni, thisRewardDelays)
junk = tempt[['trialEarnings']]
TrialEarnings[i, j, ] = junk[1 : nTrials]
junk =  tempt[['timeWaited']]
TimeWaited[i, j, ] = junk[1 : nTrials]
junk = tempt[['vaQuits']]
vaQuits[i, j,  , ] = transVaQuits(junk[, 1 : nTrials])
junk = tempt[['vaWaits']]
vaWaits[i, j, ,  ]  = transVaWaits(junk[, 1 : nTrials])
# decision value
junk = scale(vaWaits[i, j, ,  ] - vaQuits[i, j, ,  ])
dvs[i, j, , ] = scale(junk)
dvs[i, j, ,
]
junk
(vaWaits[i, j, ,  ]
)
junk = tempt[['vaWaits']]
View(junk)
vaWaits[i, j, ,  ]  = transVaWaits(junk[, 1 : nTrials])
a =  transVaWaits(junk[, 1 : nTrials])
View(a)
a = vaWaits[i, j, ,  ] - vaQuits[i, j, ,  ]
View(a)
scale(vaWaits[i, j, ,  ] - vaQuits[i, j, ,  ])
vaWaits[i, j, ,  ] - vaQuits[i, j, ,  ]
vaWaits[i, j, ,  ] - vaQuits[i, j, ,  ]
vaWaits[i, j, ,  ]
vaWaits[i, j, , 1 ]
vaWaits[i, j, 1,]
vaQuits[i,j,1,1]
a = vaWaits[i, j, ,  ] - vaQuits[i, j, ,  ]
View(a)
junk = scale(vaWaits[i, j, ,  ] - vaQuits[i, j, ,  ])
View(junk)
scale(vaWaits[i, j, ,  ] - vaQuits[i, j, ,  ])
rm(list = ls())
source('~/Documents/first_kick/wtw_individual_SDG/fixInputSim.R', echo=TRUE)
rm(list = ls(0))
rm(list = ls())
source('~/Documents/first_kick/wtw_individual_SDG/fixInputPreprocess.R', echo=TRUE)
# load scripts, library and
source('subFxs/wtwSettings.R')
load('outputs/simData/initialSpace.RData')
load('outputs/fixInputSimData/colpData.RData')
load('outputs/fixInputSimData/fixInputs.RData')
library('dplyr')
library('tidyr')
library('ggplot2')
source('subFxs/plotThemes.R')
source('subFxs/helperFxs.R')
################## compare waitDurations across para
ggplot(colpHPData, aes(dvSucessRecover)) + geom_histogram()
############## summarise withinDelta and acrossDelta ############
colpHPData$dvSucessRecover
# this script collapses fix-input simualtion data on the para level
# load scripts, library and
source('subFxs/wtwSettings.R')
load('outputs/simData/initialSpace.RData')
load('outputs/fixInputSimData/rawHPData.RData')
load('outputs/fixInputSimData/rawLPData.RData')
load('outputs/fixInputSimData/fixInputs.RData')
library('dplyr')
library('tidyr')
source('subFxs/helperFxs.R')
waitDelta = list()
dvDelta = list()
for(cIdx in 1 : 2){
cond = conditions[cIdx]
if(cond == 'HP') inputData = rawHPData
else  inputData = rawLPData
# initialize
thisWaitDelta = matrix(NA, nComb, nComb)
thisDvDelta = matrix(NA, nComb, nComb)
# across
for(i in 1 : (nComb - 1)){
for(j in (i + 1) : nComb){
thisWaitDelta[i, j] = mean(abs(inputData$timeWaited[i,1, ] - inputData$timeWaited[j,1,]))
thisWaitDelta[j, i] =  thisWaitDelta[i, j]
thisDvDelta[i, j] = mean(abs(inputData$dvs[i,1, , ] - inputData$dvs[j,1, , ]))
thisDvDelta[j, i]  = thisDvDelta[i, j]
}
}
# within
for(i in 1 : nComb){
thisWaitDelta[i, i] =  mean(abs(inputData$timeWaited[i,1, ] - inputData$timeWaited[i,2,]))
thisDvDelta[i, i] =  mean(abs(inputData$dvs[i,1, , ] - inputData$dvs[i,2, , ]))
}
# save
waitDelta[[cond]] = thisWaitDelta
dvDelta[[cond]] = thisDvDelta
}
abs(inputData$dvs[i,1, , ] - inputData$dvs[i,2, , ])
source('~/Documents/first_kick/wtw_individual_SDG/fixInputSim.R', echo=TRUE)
source('~/Documents/first_kick/wtw_individual_SDG/fixInputPreprocess.R', echo=TRUE)
# load scripts, library and
source('subFxs/wtwSettings.R')
load('outputs/simData/initialSpace.RData')
load('outputs/fixInputSimData/colpData.RData')
load('outputs/fixInputSimData/fixInputs.RData')
library('dplyr')
library('tidyr')
library('ggplot2')
source('subFxs/plotThemes.R')
source('subFxs/helperFxs.R')
colpHPData$dvSucessRecover
################## compare waitDurations across para
ggplot(colpHPData, aes(dvSucessRecover)) + geom_histogram()
ggplot(colpHPData, aes(waitSucessRecover)) + geom_histogram()
ggplot(colpHPData, aes(dvSucessRecover)) + geom_histogram()
