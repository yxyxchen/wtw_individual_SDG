cond = 'pareto_5'
otherPara = getOtherPara(cond, stepDuration)
cond = 'pareto_5'
stepDuration = 0.5
otherPara = getOtherPara(cond, stepDuration)
# condition
cond = 'pareto_5'
# other parameters
stepDuration = 0.5
otherPara = getOtherPara(cond, stepDuration)
tMax = otherPara$tMax
nTimeStep = otherPara$stepDuration
# learning para
phi = 0.01
tau = 16
gamma = 0.98
lambda = 0.94
wIni = 8
para = c(phi, tau, gamma, lambda, wIni)
tempt=  simulationModel(para,otherPara, cond)
match(0,tempt$rewardDelay)
trialEarnings = ifelse(tempt$trialEarnings[1 : nTrial] == tokenValue, 1, 0)
nTrial = match(0,tempt$rewardDelay) - 1
trialEarnings = ifelse(tempt$trialEarnings[1 : nTrial] == tokenValue, 1, 0)
actions = matrix(0, nTimeStep, nTrial)
# generate the action matrix
actions = matrix(0, nTimeStep, nTrial)
waitDurations = tempt$timeWaited
waitDurations[trialEarnings] = tempt$rewardDelays[trialEarnings]
tempt=  simulationModel(para,otherPara, cond)
# get num of trials
nTrial = match(0,tempt$rewardDelay) - 1
# binary trialEarnings
trialEarnings = ifelse(tempt$trialEarnings[1 : nTrial] == tokenValue, 1, 0)
# generate the action matrix
actions = matrix(0, nTimeStep, nTrial)
waitDurations = tempt$timeWaited
waitDurations[trialEarnings] = tempt$rewardDelays[trialEarnings]
waitDurations = waitDurations[1 : nTrial]
nTrial
cond = 'pareto_5'
# other parameters
stepDuration = 0.5
otherPara = getOtherPara(cond, stepDuration)
tMax = otherPara$tMax
nTimeStep = otherPara$stepDuration
# learning para
phi = 0.01
tau = 16
gamma = 0.98
lambda = 0.94
wIni = 8
para = c(phi, tau, gamma, lambda, wIni)
# simulate
tempt=  simulationModel(para,otherPara, cond)
# get num of trials
nTrial = match(0,tempt$rewardDelay) - 1
# binary trialEarnings
trialEarnings = ifelse(tempt$trialEarnings[1 : nTrial] == tokenValue, 1, 0)
# generate the action matrix
actions = matrix(0, nTimeStep, nTrial)
waitDurations = tempt$timeWaited
waitDurations[trialEarnings] = tempt$rewardDelays[trialEarnings]
waitDurations = waitDurations[1 : nTrial]
nTrial
rm(list = ls())
load('outputs/QStarData/initialSpace.RData')
# load simulation data
load('outputs/QStarData/colpData.RData')
View(colpHPData)
rm(list = ls())
###### load data and functions #######
source('subFxs/helperFxs.R')
library('ggplot2')
source('subFxs/plotThemes.R')
source('subFxs/wtwSettings.R')
source("subFxs/actionValueViewer.R")
load('outputs/QStarData/colpData.RData')
load('outputs/QStarData/initialSpace.RData')
load('outputs/QStarData/RawHPData.RData')
load('outputs/QStarData/RawLPData.RData')
###### choose condition ########3
condIdx = 1
cond = conditions[condIdx]
condName = conditionNames[condIdx]
inputColp = if(condName == 'HP') inputColp = colpHPData else inputColp = colpLPData
inputRaw = if(condName == 'HP') inputRaw = rawHPData else inputRaw= rawLPData
tMax = tMaxs[condIdx]
trialTick = trialTicks[[condIdx]] # so here if use [2] then get a list
nCombList = 20;
# choose figrues you want to plot
plotTrialData = F
plotKMSC= T
drawTimeSample = T
plotActionValue = F
# plot
for (nCb in 1 : length(nCombList)){
i = nCombList[nCb]
j = 1
# prepare total earnings, wtw and AUC
totalEarnings = inputColp$totalEarnings[i]
wtw = inputColp$wtw[i]
AUC = inputColp$AUC[i]
label = sprintf('colp stat, earn: %d, wtw: %.2f, AUC: %.2f',
totalEarnings, wtw, AUC)
# block data
blockData = data.frame(trialEarnings = inputRaw$trialEarnings[i,j,],
scheduledWait = inputRaw$rewardDelays[i,j,],
timeWaited = inputRaw$timeWaited[i,j,],
trialNum = 1 : length(inputRaw$timeWaited[i,j,])
)
waitDuration = blockData$timeWaited
waitDuration[is.na(waitDuration)] = blockData$scheduledWait[is.na(waitDuration)]
blockData$waitDuration = waitDuration
endTick = match(0, inputRaw$rewardDelays[i,j,]) - 1
blockData = blockData[1:endTick, ]
if(plotTrialData){
# plot
trialPlots(blockData, label)
}
if(plotTrialData) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# look at kmsc
if(plotKMSC){
# change name
rewardDelay = blockData$scheduledWait
quitIdx = (blockData$trialEarnings == 0)
kmscResults = kmscSimple(blockData$waitDuration, quitIdx, tMax, trialTick)
plotData = data.frame(pSurvival = kmscResults$kmOnGrid, time = trialTicks[[condName]])
p = ggplot(plotData, aes(time, pSurvival)) + geom_line() + ylim(c(0, 1)) + displayTheme +
ggtitle(label)
print(p)
}
if(plotKMSC) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# draw wait duration distribution
if(drawTimeSample){
# prepare pdf
cdf = 1 - kmscResults$kmOnGrid;
cdf[length(cdf)] = 1
pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
draws = sample(trialTicks[[condName]], size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram(bins = 50) + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)
print(p)
}
if(drawTimeSample) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# plot action value
# prepare data
if(plotActionValue){
para = initialSpace[i, ]
vaWaits = inputRaw$vaWaits[i,j, , ]
vaQuits = inputRaw$vaQuits[i,j, , ]
actionValueViewer(vaWaits, vaQuits, blockData, para)
}
if(plotActionValue) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
############ com
nCombList = 20;
# choose figrues you want to plot
plotTrialData = F
plotKMSC= T
drawTimeSample = T
plotActionValue = F
# plot
for (nCb in 1 : length(nCombList)){
i = nCombList[nCb]
j = 1
# prepare total earnings, wtw and AUC
totalEarnings = inputColp$totalEarnings[i]
wtw = inputColp$wtw[i]
AUC = inputColp$AUC[i]
label = sprintf('colp stat, earn: %d, wtw: %.2f, AUC: %.2f',
totalEarnings, wtw, AUC)
# block data
blockData = data.frame(trialEarnings = inputRaw$trialEarnings[i,j,],
scheduledWait = inputRaw$rewardDelays[i,j,],
timeWaited = inputRaw$timeWaited[i,j,],
trialNum = 1 : length(inputRaw$timeWaited[i,j,])
)
waitDuration = blockData$timeWaited
waitDuration[is.na(waitDuration)] = blockData$scheduledWait[is.na(waitDuration)]
blockData$waitDuration = waitDuration
endTick = match(0, inputRaw$rewardDelays[i,j,]) - 1
blockData = blockData[1:endTick, ]
if(plotTrialData){
# plot
trialPlots(blockData, label)
}
if(plotTrialData) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# look at kmsc
if(plotKMSC){
# change name
rewardDelay = blockData$scheduledWait
quitIdx = (blockData$trialEarnings == 0)
kmscResults = kmscSimple(blockData$waitDuration, quitIdx, tMax, trialTick)
plotData = data.frame(pSurvival = kmscResults$kmOnGrid, time = trialTicks[[condName]])
p = ggplot(plotData, aes(time, pSurvival)) + geom_line() + ylim(c(0, 1)) + displayTheme +
ggtitle(label)
print(p)
}
if(plotKMSC) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# draw wait duration distribution
if(drawTimeSample){
# prepare pdf
cdf = 1 - kmscResults$kmOnGrid;
cdf[length(cdf)] = 1
pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
draws = sample(trialTicks[[condName]], size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram(bins = 50) + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)
print(p)
}
if(drawTimeSample) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# plot action value
# prepare data
if(plotActionValue){
para = initialSpace[i, ]
vaWaits = inputRaw$vaWaits[i,j, , ]
vaQuits = inputRaw$vaQuits[i,j, , ]
actionValueViewer(vaWaits, vaQuits, blockData, para)
}
if(plotActionValue) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
####### view simulation data case by case ##########
# choose cases you want to plot
nCombList = which(inputColp$AUC <= 6 & inputColp$AUC >= 2 )
nCombList = 20;
# choose figrues you want to plot
plotTrialData = F
plotKMSC= T
drawTimeSample = T
plotActionValue = F
# plot
for (nCb in 1 : length(nCombList)){
i = nCombList[nCb]
j = 2
# prepare total earnings, wtw and AUC
totalEarnings = inputColp$totalEarnings[i]
wtw = inputColp$wtw[i]
AUC = inputColp$AUC[i]
label = sprintf('colp stat, earn: %d, wtw: %.2f, AUC: %.2f',
totalEarnings, wtw, AUC)
# block data
blockData = data.frame(trialEarnings = inputRaw$trialEarnings[i,j,],
scheduledWait = inputRaw$rewardDelays[i,j,],
timeWaited = inputRaw$timeWaited[i,j,],
trialNum = 1 : length(inputRaw$timeWaited[i,j,])
)
waitDuration = blockData$timeWaited
waitDuration[is.na(waitDuration)] = blockData$scheduledWait[is.na(waitDuration)]
blockData$waitDuration = waitDuration
endTick = match(0, inputRaw$rewardDelays[i,j,]) - 1
blockData = blockData[1:endTick, ]
if(plotTrialData){
# plot
trialPlots(blockData, label)
}
if(plotTrialData) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# look at kmsc
if(plotKMSC){
# change name
rewardDelay = blockData$scheduledWait
quitIdx = (blockData$trialEarnings == 0)
kmscResults = kmscSimple(blockData$waitDuration, quitIdx, tMax, trialTick)
plotData = data.frame(pSurvival = kmscResults$kmOnGrid, time = trialTicks[[condName]])
p = ggplot(plotData, aes(time, pSurvival)) + geom_line() + ylim(c(0, 1)) + displayTheme +
ggtitle(label)
print(p)
}
if(plotKMSC) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# draw wait duration distribution
if(drawTimeSample){
# prepare pdf
cdf = 1 - kmscResults$kmOnGrid;
cdf[length(cdf)] = 1
pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
draws = sample(trialTicks[[condName]], size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram(bins = 50) + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)
print(p)
}
if(drawTimeSample) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# plot action value
# prepare data
if(plotActionValue){
para = initialSpace[i, ]
vaWaits = inputRaw$vaWaits[i,j, , ]
vaQuits = inputRaw$vaQuits[i,j, , ]
actionValueViewer(vaWaits, vaQuits, blockData, para)
}
if(plotActionValue) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
####### view simulation data case by case ##########
# choose cases you want to plot
nCombList = which(inputColp$AUC <= 6 & inputColp$AUC >= 2 )
nCombList = 100;
# choose figrues you want to plot
plotTrialData = F
plotKMSC= T
drawTimeSample = T
plotActionValue = F
# plot
for (nCb in 1 : length(nCombList)){
i = nCombList[nCb]
j = 1
# prepare total earnings, wtw and AUC
totalEarnings = inputColp$totalEarnings[i]
wtw = inputColp$wtw[i]
AUC = inputColp$AUC[i]
label = sprintf('colp stat, earn: %d, wtw: %.2f, AUC: %.2f',
totalEarnings, wtw, AUC)
# block data
blockData = data.frame(trialEarnings = inputRaw$trialEarnings[i,j,],
scheduledWait = inputRaw$rewardDelays[i,j,],
timeWaited = inputRaw$timeWaited[i,j,],
trialNum = 1 : length(inputRaw$timeWaited[i,j,])
)
waitDuration = blockData$timeWaited
waitDuration[is.na(waitDuration)] = blockData$scheduledWait[is.na(waitDuration)]
blockData$waitDuration = waitDuration
endTick = match(0, inputRaw$rewardDelays[i,j,]) - 1
blockData = blockData[1:endTick, ]
if(plotTrialData){
# plot
trialPlots(blockData, label)
}
if(plotTrialData) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# look at kmsc
if(plotKMSC){
# change name
rewardDelay = blockData$scheduledWait
quitIdx = (blockData$trialEarnings == 0)
kmscResults = kmscSimple(blockData$waitDuration, quitIdx, tMax, trialTick)
plotData = data.frame(pSurvival = kmscResults$kmOnGrid, time = trialTicks[[condName]])
p = ggplot(plotData, aes(time, pSurvival)) + geom_line() + ylim(c(0, 1)) + displayTheme +
ggtitle(label)
print(p)
}
if(plotKMSC) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# draw wait duration distribution
if(drawTimeSample){
# prepare pdf
cdf = 1 - kmscResults$kmOnGrid;
cdf[length(cdf)] = 1
pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
draws = sample(trialTicks[[condName]], size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram(bins = 50) + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)
print(p)
}
if(drawTimeSample) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# plot action value
# prepare data
if(plotActionValue){
para = initialSpace[i, ]
vaWaits = inputRaw$vaWaits[i,j, , ]
vaQuits = inputRaw$vaQuits[i,j, , ]
actionValueViewer(vaWaits, vaQuits, blockData, para)
}
if(plotActionValue) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
cond
# choose cases you want to plot
nCombList = which(inputColp$AUC <= 6 & inputColp$AUC >= 2 )
nCombList = 1;
# choose figrues you want to plot
plotTrialData = F
plotKMSC= T
drawTimeSample = T
plotActionValue = F
# plot
for (nCb in 1 : length(nCombList)){
i = nCombList[nCb]
j = 1
# prepare total earnings, wtw and AUC
totalEarnings = inputColp$totalEarnings[i]
wtw = inputColp$wtw[i]
AUC = inputColp$AUC[i]
label = sprintf('colp stat, earn: %d, wtw: %.2f, AUC: %.2f',
totalEarnings, wtw, AUC)
# block data
blockData = data.frame(trialEarnings = inputRaw$trialEarnings[i,j,],
scheduledWait = inputRaw$rewardDelays[i,j,],
timeWaited = inputRaw$timeWaited[i,j,],
trialNum = 1 : length(inputRaw$timeWaited[i,j,])
)
waitDuration = blockData$timeWaited
waitDuration[is.na(waitDuration)] = blockData$scheduledWait[is.na(waitDuration)]
blockData$waitDuration = waitDuration
endTick = match(0, inputRaw$rewardDelays[i,j,]) - 1
blockData = blockData[1:endTick, ]
if(plotTrialData){
# plot
trialPlots(blockData, label)
}
if(plotTrialData) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# look at kmsc
if(plotKMSC){
# change name
rewardDelay = blockData$scheduledWait
quitIdx = (blockData$trialEarnings == 0)
kmscResults = kmscSimple(blockData$waitDuration, quitIdx, tMax, trialTick)
plotData = data.frame(pSurvival = kmscResults$kmOnGrid, time = trialTicks[[condName]])
p = ggplot(plotData, aes(time, pSurvival)) + geom_line() + ylim(c(0, 1)) + displayTheme +
ggtitle(label)
print(p)
}
if(plotKMSC) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# draw wait duration distribution
if(drawTimeSample){
# prepare pdf
cdf = 1 - kmscResults$kmOnGrid;
cdf[length(cdf)] = 1
pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
draws = sample(trialTicks[[condName]], size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram(bins = 50) + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)
print(p)
}
if(drawTimeSample) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# plot action value
# prepare data
if(plotActionValue){
para = initialSpace[i, ]
vaWaits = inputRaw$vaWaits[i,j, , ]
vaQuits = inputRaw$vaQuits[i,j, , ]
actionValueViewer(vaWaits, vaQuits, blockData, para)
}
if(plotActionValue) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
para = initialSpace[,1]
para
initialSpace[1,]
# this script analysized the simulation data on the group level
############ load data and functions #########
# library
library("ggplot2")
library("dplyr")
library("tidyr")
library('scales')
source(file = './subFxs/plotThemes.R')
source(file = './subFxs/wtwSettings.R')
# load the para space of the simulation
load('outputs/QStarData/initialSpace.RData')
# load simulation data
load('outputs/QStarData/colpData.RData')
load('outputs/QStarData/rawWTW.RData')
load('outputs/QStarData/hdrData.RData')
# define output file
outFile = 'outputs/QStar_figures'
dir.create(outFile)
library('lme4')
install.packages('lme4', dependencies = T)
dim(colpHPData$AUC )
length(colpHPData$AUC )
load('outputs/QStarData/rawHPData.RData')
library('lme4')
linearData = initialSpace;
linearData$AUC = colpHPData$AUC
linearData = as.data.frame(initialSpace);
linearData$AUC = colpHPData$AUC
View(linearData)
linearData = as.data.frame(initialSpace);
colnames(linearData) = c('phi', 'tau', 'gamma', 'lambda', 'wIni')
linearData$AUC = colpHPData$AUC
lm(AUC ~ phi + tau + wIni + gamma + lambda, data = linearData)
fit = lm(AUC ~ phi + tau + wIni + gamma + lambda, data = linearData)
summary(fit)
lapply(linearData[, colnames(linearData)], scale)
linearData = lapply(linearData[, colnames(linearData)], scale)
View(linearData)
fit = lm(AUC ~ phi + tau + wIni + gamma + lambda, data = linearData)
summary(fit)
