scale_color_manual(values= conditionColors)  +stat_summary(fun.data="mean_sdl", fun.args = list(mult=1),
geom="crossbar", width=0.3, position=position_dodge(0.6),
color = rep(c('black'), 3), fill = rep(c(element_blank()), 3))
ggplot(plotData, aes(blockNum, AUC, color = condition, fill = condition)) +
geom_dotplot(binaxis='y', stackdir='center', position=position_dodge(0.6), stackratio=1, dotsize=0.5) +
scale_color_manual(values= conditionColors)  +stat_summary(fun.data="mean_sdl", fun.args = list(mult=1),
geom="crossbar", width=0.3, position=position_dodge(0.6),
color = 'white')
p = ggplot(plotData, aes(blockNum, AUC, color = condition, fill = condition)) +
geom_dotplot(binaxis='y', stackdir='center', position=position_dodge(0.6), stackratio=1, dotsize=0.5) +
scale_color_manual(values= conditionColors)
p + stat_summary(fun.data="mean_sdl", fun.args = list(mult=1),
geom="crossbar", width=0.3, position=position_dodge(0.6),
color = 'black', fill = none)
p + stat_summary(fun.data="mean_sdl", fun.args = list(mult=1),
geom="crossbar", width=0.3, position=position_dodge(0.6),
color = 'black', fill = NA)
p + stat_summary(fun.data="mean_sdl", fun.args = list(mult=1),
geom="crossbar", width=0.1, position=position_dodge(0.4),
color = 'black', fill = NA)
p + stat_summary(fun.data="mean_sdl", fun.args = list(mult=1),
geom="crossbar", width=0.1, position=position_dodge(0.4),
color = 'black', fill = 'white')
p = ggplot(plotData, aes(blockNum, AUC, color = condition, fill = condition)) + geom_boxplot(fill="white", position = position_dodge(0.6))
p + geom_dotplot(binaxis='y', stackdir='center', position=position_dodge(0.6), stackratio=1, dotsize=0.5) +
scale_color_manual(values= conditionColors)
plotData = data.frame(AUC = groupData$AUC, totalEarnings = groupData$totalEarnings,
condition = groupData$condition, blockNum = factor(groupData$blockNum ))
p = ggplot(plotData, aes(blockNum, AUC, color = condition, fill = condition)) +
geom_boxplot(fill="white", position = position_dodge(0.6), color = 'black', width = 0.2)
p + geom_dotplot(binaxis='y', stackdir='center', position=position_dodge(0.6), stackratio=1, dotsize=0.5) +
scale_color_manual(values= conditionColors)
p = ggplot(plotData, aes(blockNum, AUC, color = condition, fill = condition)) +
geom_boxplot(fill="white", position = position_dodge(0.6), color = 'black')
p = ggplot(plotData, aes(blockNum, AUC, color = condition, fill = condition)) +
geom_boxplot(fill="white", position = position_dodge(0.6), color = 'black')
p + geom_dotplot(binaxis='y', stackdir='center', position=position_dodge(0.6), stackratio=1, dotsize=0.5) +
scale_color_manual(values= conditionColors)
p = ggplot(plotData, aes(blockNum, AUC, color = condition, fill = condition)) +
geom_boxplot(fill="white", color = 'black')
p = ggplot(plotData, aes(blockNum, AUC, color = condition, fill = condition)) +
geom_boxplot(fill="white", color = 'black')
p + geom_dotplot(binaxis='y', stackdir='center', position=position_dodge(0.6), stackratio=1, dotsize=0.5) +
scale_color_manual(values= conditionColors)
p = ggplot(plotData, aes(blockNum, AUC, color = condition)) +
geom_boxplot(fill="white", position = position_dodge(0.6), fill = 'white', width = 0.3)
p + geom_dotplot(binaxis='y', stackdir='center', position=position_dodge(0.6), stackratio=1, dotsize=0.5) +
scale_color_manual(values= conditionColors)
p = ggplot(plotData, aes(blockNum, AUC, color = condition)) +
geom_boxplot(fill="white", position = position_dodge(0.6), fill = 'white', width = 0.3)
p + geom_dotplot(binaxis='y', stackdir='center', position=position_dodge(0.6), stackratio=0.5, dotsize=0.3) +
scale_fill_manual(values= conditionColors)
plotData = data.frame(AUC = groupData$AUC, totalEarnings = groupData$totalEarnings,
condition = groupData$condition, blockNum = factor(groupData$blockNum ))
p = ggplot(plotData, aes(blockNum, AUC, color = condition)) +
geom_boxplot(fill="white", position = position_dodge(0.6), fill = 'white', width = 0.3)
p + geom_dotplot(binaxis='y', stackdir='center', position=position_dodge(0.6), stackratio=0.5, dotsize=0.3) +
scale_color_manual(values= conditionColors)
ggplot(plotData, aes(blockNum, AUC, color = condition)) +
geom_boxplot(fill="white", position = position_dodge(0.6), fill = 'white', width = 0.3)
ggplot(plotData, aes(blockNum, AUC, color = condition)) +
geom_dotplot(binaxis='y', stackdir='center', position=position_dodge(0.6), stackratio=0.5, dotsize=0.3) +
scale_color_manual(values= conditionColors)
ggplot(plotData, aes(blockNum, AUC, color = condition, fill = condition)) +
geom_dotplot(binaxis='y', stackdir='center', position=position_dodge(0.6), stackratio=0.5, dotsize=0.3) +
scale_color_manual(values= conditionColors)
ggplot(plotData, aes(blockNum, AUC, fill = condition)) +
geom_dotplot(binaxis='y', stackdir='center', position=position_dodge(0.6), stackratio= 1, dotsize=0.5) +
scale_color_manual(values= conditionColors)
ggplot(plotData, aes(blockNum, AUC, fill = condition)) +
geom_dotplot(binaxis='y', stackdir='center', position=position_dodge(0.6), stackratio= 1, dotsize=0.5) +
scale_fill_manual(values= conditionColors)
source('subFxs/loadFxs.R')
source('subFxs/helperFxs.R')
source("subFxs/plotThemes.R")
source("subFxs/wtwSettings.R")
library("ggplot2")
library('dplyr')
library(Hmisc)
plotData = data.frame(AUC = groupData$AUC, totalEarnings = groupData$totalEarnings,
condition = groupData$condition, blockNum = factor(groupData$blockNum ))
p = ggplot(plotData, aes(blockNum, AUC, fill = condition)) +
geom_dotplot(binaxis='y', stackdir='center', position=position_dodge(0.6), stackratio= 1, dotsize=0.5) +
scale_fill_manual(values= conditionColors)
plotData = data.frame(AUC = groupData$AUC, totalEarnings = groupData$totalEarnings,
condition = groupData$condition, blockNum = factor(groupData$blockNum ))
p = ggplot(plotData, aes(blockNum, AUC, fill = condition)) +
geom_dotplot(binaxis='y', stackdir='center', position=position_dodge(0.6), stackratio= 1, dotsize=0.5) +
scale_fill_manual(values= conditionColors) + saveTheme
ggplot(plotData, aes(blockNum, AUC, fill = condition)) +
geom_dotplot(binaxis='y', stackdir='center', position=position_dodge(0.6), stackratio= 1, dotsize=0.5) +
scale_fill_manual(values= conditionColors) + saveTheme
source('subFxs/loadFxs.R')
source('subFxs/helperFxs.R')
source("subFxs/plotThemes.R")
source("subFxs/wtwSettings.R")
library("ggplot2")
library('dplyr')
library(Hmisc)
ggplot(plotData, aes(blockNum, AUC, fill = condition)) +
geom_dotplot(binaxis='y', stackdir='center', position=position_dodge(0.6), stackratio= 1, dotsize=0.5) +
scale_fill_manual(values= conditionColors) + saveTheme
ggplot(plotData, aes(blockNum, AUC, fill = condition)) +
geom_dotplot(binaxis='y', stackdir='center', position=position_dodge(0.6), stackratio= 1, dotsize=0.7) +
scale_fill_manual(values= conditionColors) + saveTheme
plotData = data.frame(AUC = groupData$AUC, totalEarnings = groupData$totalEarnings,
condition = groupData$condition, blockNum = factor(groupData$blockNum ))
ggplot(plotData, aes(blockNum, AUC, fill = condition, color = condition)) +
geom_dotplot(binaxis='y', stackdir='center', position=position_dodge(0.6), stackratio= 1, dotsize=0.5) +
scale_fill_manual(values= conditionColors) + scale_color_manual(values= conditionColors)
source('subFxs/loadFxs.R')
source('subFxs/helperFxs.R')
source("subFxs/plotThemes.R")
source("subFxs/wtwSettings.R")
library("ggplot2")
library('dplyr')
library(Hmisc)
### plot AUC distribution
plotData = data.frame(AUC = groupData$AUC, totalEarnings = groupData$totalEarnings,
condition = groupData$condition, blockNum = factor(groupData$blockNum ))
ggplot(plotData, aes(blockNum, AUC, fill = condition, color = condition)) +
geom_dotplot(binaxis='y', stackdir='center', position=position_dodge(0.6), stackratio= 1, dotsize=0.5) +
scale_fill_manual(values= conditionColors) + scale_color_manual(values= conditionColors)
p + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="pointrange", position=position_dodge(0.6))
p + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="pointrange", position=position_dodge(0.6), color = condition)
p + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="pointrange", position=position_dodge(0.6), color = conditionColors)
p + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1, size = 2),
geom="pointrange", position=position_dodge(0.6))
p + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="pointrange", position=position_dodge(0.6))
p + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="pointrange", position=position_dodge(0.6), color = 'grey')
ggplot(plotData, aes(blockNum, AUC, fill = condition, color = condition)) +
geom_dotplot(binaxis='y', stackdir='center', position=position_dodge(0.6), stackratio= 1, dotsize=0.5) +
scale_fill_manual(values= conditionColors) + scale_color_manual(values= conditionColors)
ggplot(plotData, aes(blockNum, AUC, fill = condition, color = condition)) +
geom_dotplot(binaxis='y', stackdir='center', position=position_dodge(0.6), stackratio= 1, dotsize=0.5) +
scale_fill_manual(values= conditionColors) + scale_color_manual(values= conditionColors) + saveTheme
p = ggplot(plotData, aes(blockNum, AUC, fill = condition, color = condition)) +
geom_dotplot(binaxis='y', stackdir='center', position=position_dodge(0.6), stackratio= 1, dotsize=0.5) +
scale_fill_manual(values= conditionColors) + scale_color_manual(values= conditionColors) + saveTheme
p + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="pointrange", position=position_dodge(0.6), color = 'grey')
p + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1, shape = 2),
geom="pointrange", position=position_dodge(0.6), color = 'grey')
p + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="pointrange", position=position_dodge(0.6), color = 'grey', size = 2, shape = 2)
p + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="linerange", position=position_dodge(0.6), color = 'grey')
p + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="linerange", position=position_dodge(0.6), color = '#404040')
p + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="linerange", position=position_dodge(0.6), color = '#404040', size = 1) +
stat_summary(fun.y=mean, geom="hline", shape=18,
size=3, color='#404040')
p + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="linerange", position=position_dodge(0.6), color = '#404040', size = 1) +
stat_summary(fun.y=mean, geom="line", shape=18,
size=3, color='#404040')
p + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="linerange", position=position_dodge(0.6), color = '#404040', size = 1) +
stat_summary(fun.y=mean, geom="hline", shape=18,
size=3, color='#404040')
p + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="linerange", position=position_dodge(0.6), color = '#404040', size = 1) +
stat_summary(fun.y=mean, geom="hline", shape=18,
size=3, color='#404040')
p + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="linerange", position=position_dodge(0.6), color = '#404040', size = 1) +
stat_summary(fun.y=mean, geom="vline", shape=18,
size=3, color='#404040')
p + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="pointrange", position=position_dodge(0.6), color = '#404040', size = 1)
p + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="pointrange", position=position_dodge(0.6), color = '#969696', size = 0.3)
p + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="pointrange", position=position_dodge(0.6), color = '#636363', size = 0.5)
p + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="pointrange", position=position_dodge(0.6), color = '#636363', size = 0.5, shape = 3)
p = ggplot(plotData, aes(blockNum, AUC, fill = condition, color = condition)) +
geom_dotplot(binaxis='y', stackdir='center', position=position_dodge(0.6), stackratio= 1, dotsize=0.5)
p + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="pointrange", position=position_dodge(0.6), color = '#636363', size = 0.5, shape = 3)
p = ggplot(plotData, aes(blockNum, AUC, fill = condition, color = condition)) +
geom_dotplot(binaxis='y', stackdir='center', position=position_dodge(0.6), stackratio= 1, dotsize=0.5) +
scale_fill_manual(values= conditionColors) + scale_color_manual(values= conditionColors) + saveTheme
p + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="pointrange", position=position_dodge(0.6), color = 'orange', size = 0.5, shape = 3)
plot AUC distribution
plotData = data.frame(AUC = groupData$AUC, totalEarnings = groupData$totalEarnings,
condition = groupData$condition, blockNum = factor(groupData$blockNum ))
p = ggplot(plotData, aes(blockNum, AUC, fill = condition, color = condition)) +
geom_dotplot(binaxis='y', stackdir='center', position=position_dodge(0.6), stackratio= 1, dotsize=0.5) +
scale_fill_manual(values= conditionColors) + scale_color_manual(values= conditionColors) + saveTheme
p + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="pointrange", position=position_dodge(0.6), color = 'red', size = 0.5, shape = 3)
plotData = data.frame(AUC = groupData$AUC, totalEarnings = groupData$totalEarnings,
condition = groupData$condition, blockNum = factor(groupData$blockNum ))
p = ggplot(plotData, aes(blockNum, AUC, fill = condition, color = condition)) +
geom_dotplot(binaxis='y', stackdir='center', position=position_dodge(0.6), stackratio= 1, dotsize=0.5) +
scale_fill_manual(values= conditionColors) + scale_color_manual(values= conditionColors) + saveTheme
p + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="pointrange", position=position_dodge(0.6), color = 'red', size = 0.7, shape = 3)
p + stat_summary(fun.data= mean_sel, fun.args = list(mult=1),
geom="pointrange", position=position_dodge(0.6), color = 'red', size = 0.7, shape = 3)
mean_se =  function(x) {
m <- mean(x)
se = sd(x) / sqrt(length(x))
ymin <- m-se
ymax <- m+se
return(c(y=m,ymin=ymin,ymax=ymax))
}
p + stat_summary(fun.data= mean_se, fun.args = list(mult=1),
geom="pointrange", position=position_dodge(0.6), color = 'red', size = 0.7, shape = 3)
p + stat_summary(fun.data= mean_se,
geom="pointrange", position=position_dodge(0.6), color = 'red', size = 0.7, shape = 3)
p = ggplot(plotData, aes(blockNum, AUC, fill = condition, color = condition)) +
geom_dotplot(binaxis='y', stackdir='center', position=position_dodge(0.6), stackratio= 1, dotsize=0.5) +
scale_fill_manual(values= conditionColors) + scale_color_manual(values= conditionColors) +
stat_summary(fun.data= mean_se, geom="pointrange", position=position_dodge(0.6), size = 0.7, shape = 3)
p + saveTheme + xlab('Block No.') + ylab('AUC / s')
p = ggplot(plotData, aes(blockNum, AUC, fill = condition, color = condition)) +
geom_dotplot(binaxis='y', stackdir='center', position=position_dodge(0.6), stackratio= 1, dotsize=0.5) +
scale_fill_manual(values= conditionColors) + scale_color_manual(values= conditionColors) +
stat_summary(fun.data= mean_se, geom="pointrange", position=position_dodge(0.6), color = 'red', size = 0.7)
p + saveTheme + xlab('Block No.') + ylab('AUC / s')
plotData = data.frame(AUC = groupData$AUC, totalEarnings = groupData$totalEarnings,
condition = groupData$condition, blockNum = factor(groupData$blockNum ))
mean_se =  function(x) {
m <- mean(x)
se = sd(x) / sqrt(length(x))
ymin <- m-se
ymax <- m+se
return(c(y=m,ymin=ymin,ymax=ymax))
}
p = ggplot(plotData, aes(blockNum, AUC, fill = condition, color = condition)) +
geom_dotplot(binaxis='y', stackdir='center', position=position_dodge(0.6), stackratio= 1, dotsize=0.5) +
scale_fill_manual(values= conditionColors) + scale_color_manual(values= conditionColors) +
stat_summary(fun.data= mean_se, geom="pointrange", position=position_dodge(0.6), color = 'red', size = 1, shape = 20)
p + saveTheme + xlab('Block No.') + ylab('AUC / s')
plotData = data.frame(AUC = groupData$AUC, totalEarnings = groupData$totalEarnings,
condition = groupData$condition, blockNum = factor(groupData$blockNum ))
mean_se =  function(x) {
m <- mean(x)
se = sd(x) / sqrt(length(x))
ymin <- m-se
ymax <- m+se
return(c(y=m,ymin=ymin,ymax=ymax))
}
p = ggplot(plotData, aes(blockNum, AUC, fill = condition, color = condition)) +
geom_dotplot(binaxis='y', stackdir='center', position=position_dodge(0.6), stackratio= 1, dotsize=0.5) +
scale_fill_manual(values= conditionColors) + scale_color_manual(values= conditionColors) +
stat_summary(fun.data= mean_se, geom="pointrange", position=position_dodge(0.6), color = 'red', size = 1, shape = 1)
p + saveTheme + xlab('Block No.') + ylab('AUC / s')
plotData = data.frame(AUC = groupData$AUC, totalEarnings = groupData$totalEarnings,
condition = groupData$condition, blockNum = factor(groupData$blockNum ))
mean_se =  function(x) {
m <- mean(x)
se = sd(x) / sqrt(length(x))
ymin <- m-se
ymax <- m+se
return(c(y=m,ymin=ymin,ymax=ymax))
}
p = ggplot(plotData, aes(blockNum, AUC, fill = condition, color = condition)) +
geom_dotplot(binaxis='y', stackdir='center', position=position_dodge(0.6), stackratio= 1, dotsize=0.5) +
scale_fill_manual(values= conditionColors) + scale_color_manual(values= conditionColors) +
stat_summary(fun.data= mean_se, geom="pointrange", position=position_dodge(0.6), color = 'red', size = 0.5, shape = 1)
p + saveTheme + xlab('Block No.') + ylab('AUC / s')
p = ggplot(plotData, aes(blockNum, AUC, fill = condition, color = condition)) +
geom_dotplot(binaxis='y', stackdir='center', position=position_dodge(0.6), stackratio= 1, dotsize=0.5) +
scale_fill_manual(values= conditionColors) + scale_color_manual(values= conditionColors) +
stat_summary(fun.data= mean_se, geom="pointrange", position=position_dodge(0.6), color = 'red', size = 0.5, shape = 4)
p + saveTheme + xlab('Block No.') + ylab('AUC / s')
p = ggplot(plotData, aes(blockNum, AUC, fill = condition, color = condition)) +
geom_dotplot(binaxis='y', stackdir='center', position=position_dodge(0.6), stackratio= 1, dotsize=0.5) +
scale_fill_manual(values= conditionColors) + scale_color_manual(values= conditionColors) +
stat_summary(fun.data= mean_se, geom="pointrange", position=position_dodge(0.6), color = 'red', size = 0.5, shape = 4)
p + saveTheme + xlab('Block No.') + ylab('AUC / s')
ggsave("outputs/exp_figures/earningExp.pdf", width = 8, height = 4)
# organize and save groupdata
groupData = data.frame(id = rep(allIDs, each = nBlock), blockNum = rep( t(1 : nBlock), n),
cbal = rep(hdrData$cbal, each = nBlock), condition = factor(condByBlock, levels = c('HP', 'LP')),
stress = stressByBlock, AUC = grpAUC,
totalEarnings = earningsByBlock)
dir.create('outputs/expData')
save(groupData, file = 'outputs/expData/groupData.RData')
##### plot total earnings
ggplot(groupData, aes(totalEarnings)) + geom_histogram(bins = 10) +
facet_wrap(~condition, nrow = 1) + xlab('Total earnings') + ylab("Num of blocks") + saveTheme + xlim(c(0, 600))
ggsave("outputs/exp_figures/earningExp.pdf", width = 8, height = 4)
### plot AUC distribution
plotData = data.frame(AUC = groupData$AUC, totalEarnings = groupData$totalEarnings,
condition = groupData$condition, blockNum = factor(groupData$blockNum ))
mean_se =  function(x) {
m <- mean(x)
se = sd(x) / sqrt(length(x))
ymin <- m-se
ymax <- m+se
return(c(y=m,ymin=ymin,ymax=ymax))
}
p = ggplot(plotData, aes(blockNum, AUC, fill = condition, color = condition)) +
geom_dotplot(binaxis='y', stackdir='center', position=position_dodge(0.6), stackratio= 1, dotsize=0.5) +
scale_fill_manual(values= conditionColors) + scale_color_manual(values= conditionColors) +
stat_summary(fun.data= mean_se, geom="pointrange", position=position_dodge(0.6), color = 'red', size = 0.5, shape = 4)
p + saveTheme + xlab('Block No.') + ylab('AUC / s')
ggsave("outputs/exp_figures/auc_distribution.pdf", width = 8, height = 4)
source('~/Documents/first_kick/wtw_individual_SDG/expAnalysis.R', echo=TRUE)
source('~/Documents/first_kick/wtw_individual_SDG/expAnalysis.R', echo=TRUE)
outFile = 'outputs/QStarData'
################## read data #################
# library
library('ggplot2')
library('dplyr')
library('tidyr')
source('model.R') # QStar model
source('subFxs/wtwSettings.R') # wtw settings for both HP and LP
# can't change
source('subFxs/paraFxs.R') # functions to get MSPara and otherPara from inputs and wtwSettings
# can change for different MS model, and
################ input ################
# cond input
condIdx = 1
cond = conditions[condIdx];
condName = conditionNames[condIdx]
condColor = conditionColors[condIdx]
sprintf('Condition : %s %s', cond, condName)
# other input
stepDuration = 0.5
nMS = 10
traceDecay = 0.985
sigma = 0.2
# genrate
otherPara = getOtherPara(cond, stepDuration)
MSPara = getMSPara(cond, stepDuration, nMS, traceDecay, sigma)
############# simulate for the distribution of toalEarnings ##########
nPara = 5
paraNames = c('phi', 'tau', 'gamma', 'lambda', 'wIni')
nValue = 3
nComb = nValue ^ nPara
initialSpace = matrix(NA, nValue^nPara, nPara)
initialSpace[,1] = rep(c(0.01, 0.05, 0.2), each = nValue^(nPara - 1)) # phi
initialSpace[,2] = rep(rep(seq(8, 24, 8), each = nValue), nValue^(nPara - 2)) # tau
initialSpace[,3] = rep(rep(seq(0.90, 0.98, 0.04), each = nValue^2), nValue^(nPara - 3))
initialSpace[,4] = rep(rep(seq(0.90, 0.98, 0.04), each = nValue^3), nValue^(nPara - 4))
initialSpace[,5] = rep(rep(seq(2, 8, 3), each = nValue^4), nValue^(nPara - 5))
outFile = 'QStarData'
save('initialSpace', 'nValue', 'nPara', 'paraNames', 'nComb',
file = sprintf('%s/initialSpace.RData', outFile))
### output file ####
outFile = 'outputs/QStarData'
dir.create(outFile)
################## read data #################
# library
library('ggplot2')
library('dplyr')
library('tidyr')
source('model.R') # QStar model
source('subFxs/wtwSettings.R') # wtw settings for both HP and LP
# can't change
source('subFxs/paraFxs.R') # functions to get MSPara and otherPara from inputs and wtwSettings
# can change for different MS model, and
################ input ################
# cond input
condIdx = 1
cond = conditions[condIdx];
condName = conditionNames[condIdx]
condColor = conditionColors[condIdx]
sprintf('Condition : %s %s', cond, condName)
# other input
stepDuration = 0.5
nMS = 10
traceDecay = 0.985
sigma = 0.2
# genrate
otherPara = getOtherPara(cond, stepDuration)
MSPara = getMSPara(cond, stepDuration, nMS, traceDecay, sigma)
############# simulate for the distribution of toalEarnings ##########
nPara = 5
paraNames = c('phi', 'tau', 'gamma', 'lambda', 'wIni')
nValue = 3
nComb = nValue ^ nPara
initialSpace = matrix(NA, nValue^nPara, nPara)
initialSpace[,1] = rep(c(0.01, 0.05, 0.2), each = nValue^(nPara - 1)) # phi
initialSpace[,2] = rep(rep(seq(8, 24, 8), each = nValue), nValue^(nPara - 2)) # tau
initialSpace[,3] = rep(rep(seq(0.90, 0.98, 0.04), each = nValue^2), nValue^(nPara - 3))
initialSpace[,4] = rep(rep(seq(0.90, 0.98, 0.04), each = nValue^3), nValue^(nPara - 4))
initialSpace[,5] = rep(rep(seq(2, 8, 3), each = nValue^4), nValue^(nPara - 5))
outFile = 'QStarData'
save('initialSpace', 'nValue', 'nPara', 'paraNames', 'nComb',
file = sprintf('%s/initialSpace.RData', outFile))
# set seed
set.seed(123)
save('initialSpace', 'nValue', 'nPara', 'paraNames', 'nComb',
file = sprintf('%s/initialSpace.RData', outFile))
sprintf('%s/initialSpace.RData', outFile)
### output file ####
outFile = 'outputs/QStarData'
dir.create(outFile)
################## read data #################
# library
library('ggplot2')
library('dplyr')
library('tidyr')
source('model.R') # QStar model
source('subFxs/wtwSettings.R') # wtw settings for both HP and LP
# can't change
source('subFxs/paraFxs.R') # functions to get MSPara and otherPara from inputs and wtwSettings
# can change for different MS model, and
################ input ################
# cond input
condIdx = 1
cond = conditions[condIdx];
condName = conditionNames[condIdx]
condColor = conditionColors[condIdx]
sprintf('Condition : %s %s', cond, condName)
# other input
stepDuration = 0.5
nMS = 10
traceDecay = 0.985
sigma = 0.2
# genrate
otherPara = getOtherPara(cond, stepDuration)
MSPara = getMSPara(cond, stepDuration, nMS, traceDecay, sigma)
############# simulate for the distribution of toalEarnings ##########
nPara = 5
paraNames = c('phi', 'tau', 'gamma', 'lambda', 'wIni')
nValue = 3
nComb = nValue ^ nPara
initialSpace = matrix(NA, nValue^nPara, nPara)
initialSpace[,1] = rep(c(0.01, 0.05, 0.2), each = nValue^(nPara - 1)) # phi
initialSpace[,2] = rep(rep(seq(8, 24, 8), each = nValue), nValue^(nPara - 2)) # tau
initialSpace[,3] = rep(rep(seq(0.90, 0.98, 0.04), each = nValue^2), nValue^(nPara - 3))
initialSpace[,4] = rep(rep(seq(0.90, 0.98, 0.04), each = nValue^3), nValue^(nPara - 4))
initialSpace[,5] = rep(rep(seq(2, 8, 3), each = nValue^4), nValue^(nPara - 5))
outFile = 'QStarData'
save('initialSpace', 'nValue', 'nPara', 'paraNames', 'nComb',
file = sprintf('%s/initialSpace.RData', outFile))
# set seed
set.seed(123)
# genrate
otherPara = getOtherPara(cond, stepDuration)
MSPara = getMSPara(cond, stepDuration, nMS, traceDecay, sigma)
############# simulate for the distribution of toalEarnings ##########
nPara = 5
paraNames = c('phi', 'tau', 'gamma', 'lambda', 'wIni')
nValue = 3
nComb = nValue ^ nPara
initialSpace = matrix(NA, nValue^nPara, nPara)
initialSpace[,1] = rep(c(0.01, 0.05, 0.2), each = nValue^(nPara - 1)) # phi
initialSpace[,2] = rep(rep(seq(8, 24, 8), each = nValue), nValue^(nPara - 2)) # tau
initialSpace[,3] = rep(rep(seq(0.90, 0.98, 0.04), each = nValue^2), nValue^(nPara - 3))
initialSpace[,4] = rep(rep(seq(0.90, 0.98, 0.04), each = nValue^3), nValue^(nPara - 4))
initialSpace[,5] = rep(rep(seq(2, 8, 3), each = nValue^4), nValue^(nPara - 5))
save('initialSpace', 'nValue', 'nPara', 'paraNames', 'nComb',
file = 'outputs/QStarData/initialSpace.RData')
# set seed
set.seed(123)
# simualte
nRep = 5
tMax = otherPara[['tMax']]
TrialEarnings = array(dim = c(nValue^nPara, nRep, blockSecs / iti + 1))
RewardDelays = array(dim = c(nValue^nPara, nRep, blockSecs / iti + 1))
Ws = array(dim = c(nValue^nPara, nRep, tMax / stepDuration)) # diifferent from master
TimeWaited = array(dim = c(nValue^nPara, nRep, blockSecs / iti + 1))
vaQuits = array(dim = c(nValue^nPara, nRep, tMax / stepDuration, blockSecs / iti + 1))
vaWaits = array(dim = c(nValue^nPara, nRep, tMax / stepDuration, blockSecs / iti + 1))
i = 1
j = 1
para = initialSpace[i,]
phi = para[1]
tau = para[2]
gamma = para[3]
lambda = para[4]
wIni = para[5]
# task para
source('subFxs/taskFxs.R')
source("subFxs/wtwSettings.R")
# read otherPara
tMax= otherPara[['tMax']]
stepDuration = otherPara[['stepDuration']]
timeTicks = otherPara[['timeTicks']] # begin timepoint of states
nTimeStep = tMax / stepDuration
# actionList
actionList = c('wait', 'quit') # wait means wait until t+1, quit means quit at t
########### simulation repeatedly ############
# initialize action value, eligibility trace and stat
ws = rep(wIni, nTimeStep) # weight vector for "wait", each element for each timeStep
es = rep(0, nTimeStep); # es vector for "wait"
onsetXs = 1 # onset state is 1
xs = onsetXs # every trial starts from the onset state
# additionally initialize vaWaits and vaQuits
vaWaits = matrix(NA, tMax / stepDuration, blockSecs / iti + 1);
vaQuits = matrix(NA, tMax / stepDuration, blockSecs / iti + 1);
endTimes = rep(NA, length = (blockSecs / iti + 1))
# initialize time and reward seq
totalSecs = 0
seq = c()
rewardDelays = rep(0, blockSecs / iti + 1)
tIdx = 0
stepGap = 1 # since es = 0 initially, so this value is abitratry
# initialize outputs
trialEarnings = rep(0, blockSecs / iti + 1)
timeWaited = rep(0, blockSecs / iti + 1)
seq
cond
runif(1)
tempt=  QStarModel(para,MSPara, otherPara, cond)
source('wtwSettings.R')
source('wtwSettings.R')
