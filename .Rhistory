# hdrData include otherPara, MSPara
# also nTimeStep and TraceValue
# therefore, no need to call getPara in later analysis anymore
stepDuration = 0.5
source("subFxs/paraFxs.R")
for(c in 1: 2){
cond = conditions[c]
otherPara = getOtherPara(cond, stepDuration)
MSPara = getMSPara(cond, stepDuration, nMS, traceDecay, sigma)
hdrData = c(otherPara, MSPara)
hdrData$nTimeStep = hdrData$tMax / hdrData$stepDuration
hdrData$traceValues = hdrData$traceDecay ^ ( 1 :   hdrData$nTimeStep - 1)
if(cond == 'unif20') hdrHPData= hdrData else  hdrLPData= hdrData
}
fileName = 'outputs/QStarData/hdrData.RData'
save(hdrHPData, hdrLPData, file = fileName)
rm(list = ls())
source('~/Documents/first_kick/wtw_individual/simPreprocess.R', echo=TRUE)
source('~/Documents/first_kick/wtw_individual_SDG/simGroupAnalysis.R', echo=TRUE)
rm(list = ls())
# this simulation using average payoff
### output file ####
outFile = 'outputs/QStarData'
dir.create(outFile)
################## read data #################
# library
library('ggplot2')
library('dplyr')
library('tidyr')
source('model.R') # QStar model
source('subFxs/wtwSettings.R') # wtw settings for both HP and LP
# can't change
source('subFxs/paraFxs.R') # functions to get MSPara and otherPara from inputs and wtwSettings
# can change for different MS model, and
################ input ################
# cond input
for(condIdx in 1 : 2){
cond = conditions[condIdx];
condName = conditionNames[condIdx]
condColor = conditionColors[condIdx]
sprintf('Condition : %s %s', cond, condName)
# other input
stepDuration = 0.5
traceDecay = 0.985
sigma = 0.2
# genrate
otherPara = getOtherPara(cond, stepDuration)
############# simulate for the distribution of toalEarnings ##########
nPara = 5
paraNames = c('phi', 'tau', 'gamma', 'lambda', 'wIni')
nValue = 3
nComb = nValue ^ nPara
initialSpace = matrix(NA, nValue^nPara, nPara)
initialSpace[,1] = rep(c(0.01, 0.05, 0.2), each = nValue^(nPara - 1)) # phi
initialSpace[,2] = rep(rep(seq(8, 24, 8), each = nValue), nValue^(nPara - 2)) # tau
initialSpace[,3] = rep(rep(seq(0.90, 0.98, 0.04), each = nValue^2), nValue^(nPara - 3))
initialSpace[,4] = rep(rep(seq(0.90, 0.98, 0.04), each = nValue^3), nValue^(nPara - 4))
initialSpace[,5] = rep(rep(seq(2, 8, 3), each = nValue^4), nValue^(nPara - 5))
save('initialSpace', 'nValue', 'nPara', 'paraNames', 'nComb',
file = 'outputs/QStarData/initialSpace.RData')
# set seed
set.seed(123)
# simualte
nRep = 5
tMax = otherPara[['tMax']]
TrialEarnings = array(dim = c(nValue^nPara, nRep, blockSecs / iti + 1))
RewardDelays = array(dim = c(nValue^nPara, nRep, blockSecs / iti + 1))
Ws = array(dim = c(nValue^nPara, nRep, tMax / stepDuration)) # diifferent from master
TimeWaited = array(dim = c(nValue^nPara, nRep, blockSecs / iti + 1))
vaQuits = array(dim = c(nValue^nPara, nRep, tMax / stepDuration, blockSecs / iti + 1))
vaWaits = array(dim = c(nValue^nPara, nRep, tMax / stepDuration, blockSecs / iti + 1))
for(i in 1 : 1:nrow(initialSpace)){
para = initialSpace[i,]
for(j in 1 : nRep ){
tempt=  QStarModel(para,otherPara, cond)
TrialEarnings[i, j,] = tempt[['trialEarnings']]
Ws[i, j,] = tempt[['ws']]
RewardDelays[i, j,] = tempt[['rewardDelays']]
TimeWaited[i, j, ] = tempt[['timeWaited']]
vaQuits[i, j,  , ] = tempt[['vaQuits']]
vaWaits[i, j, ,  ] = tempt[['vaWaits']]
}
}
# organize and save outputs
outputData = list("ws" = Ws, "timeWaited" = TimeWaited,
"rewardDelays" = RewardDelays, "trialEarnings" = TrialEarnings,
"vaWaits" = vaWaits, "vaQuits" = vaQuits
)
outFile = 'QStarData'
if(cond == "unif20") rawHPData = outputData else rawLPData = outputData
fileName = sprintf('outputs/%s/rawHPData.RData', outFile)
save(rawHPData,file = fileName)
fileName = sprintf('outputs/%s/rawLPData.RData', outFile)
save(rawLPData,file = fileName)
}
# this simulation using average payoff
### output file ####
outFile = 'outputs/QStarData'
dir.create(outFile)
################## read data #################
# library
library('ggplot2')
library('dplyr')
library('tidyr')
source('model.R') # QStar model
source('subFxs/wtwSettings.R') # wtw settings for both HP and LP
# can't change
source('subFxs/paraFxs.R') # functions to get MSPara and otherPara from inputs and wtwSettings
# can change for different MS model, and
################ input ################
# cond input
for(condIdx in 1 : 2){
cond = conditions[condIdx];
condName = conditionNames[condIdx]
condColor = conditionColors[condIdx]
sprintf('Condition : %s %s', cond, condName)
# other input
stepDuration = 0.5
traceDecay = 0.985
sigma = 0.2
# genrate
otherPara = getOtherPara(cond, stepDuration)
############# simulate for the distribution of toalEarnings ##########
nPara = 5
paraNames = c('phi', 'tau', 'gamma', 'lambda', 'wIni')
nValue = 3
nComb = nValue ^ nPara
initialSpace = matrix(NA, nValue^nPara, nPara)
initialSpace[,1] = rep(c(0.01, 0.05, 0.2), each = nValue^(nPara - 1)) # phi
initialSpace[,2] = rep(rep(seq(8, 24, 8), each = nValue), nValue^(nPara - 2)) # tau
initialSpace[,3] = rep(rep(seq(0.90, 0.98, 0.04), each = nValue^2), nValue^(nPara - 3))
initialSpace[,4] = rep(rep(seq(0.90, 0.98, 0.04), each = nValue^3), nValue^(nPara - 4))
initialSpace[,5] = rep(rep(seq(2, 8, 3), each = nValue^4), nValue^(nPara - 5))
save('initialSpace', 'nValue', 'nPara', 'paraNames', 'nComb',
file = 'outputs/QStarData/initialSpace.RData')
# set seed
set.seed(123)
# simualte
nRep = 5
tMax = otherPara[['tMax']]
TrialEarnings = array(dim = c(nValue^nPara, nRep, blockSecs / iti + 1))
RewardDelays = array(dim = c(nValue^nPara, nRep, blockSecs / iti + 1))
Ws = array(dim = c(nValue^nPara, nRep, tMax / stepDuration)) # diifferent from master
TimeWaited = array(dim = c(nValue^nPara, nRep, blockSecs / iti + 1))
vaQuits = array(dim = c(nValue^nPara, nRep, tMax / stepDuration, blockSecs / iti + 1))
vaWaits = array(dim = c(nValue^nPara, nRep, tMax / stepDuration, blockSecs / iti + 1))
for(i in 1 : 1:nrow(initialSpace)){
para = initialSpace[i,]
for(j in 1 : nRep ){
tempt=  QStarModel(para,otherPara, cond)
TrialEarnings[i, j,] = tempt[['trialEarnings']]
Ws[i, j,] = tempt[['ws']]
RewardDelays[i, j,] = tempt[['rewardDelays']]
TimeWaited[i, j, ] = tempt[['timeWaited']]
vaQuits[i, j,  , ] = tempt[['vaQuits']]
vaWaits[i, j, ,  ] = tempt[['vaWaits']]
}
}
# organize and save outputs
outputData = list("ws" = Ws, "timeWaited" = TimeWaited,
"rewardDelays" = RewardDelays, "trialEarnings" = TrialEarnings,
"vaWaits" = vaWaits, "vaQuits" = vaQuits
)
outFile = 'QStarData'
if(cond == "unif20"){
rawHPData = outputData
fileName = sprintf('outputs/%s/rawHPData.RData', outFile)
save(rawHPData,file = fileName)
}else rawLPData = outputData{
rawLPData = outputData
fileName = sprintf('outputs/%s/rawHPData.RData', outFile)
save(rawHPData,file = fileName)
}
}
for(condIdx in 1 : 2){
cond = conditions[condIdx];
condName = conditionNames[condIdx]
condColor = conditionColors[condIdx]
sprintf('Condition : %s %s', cond, condName)
# other input
stepDuration = 0.5
traceDecay = 0.985
sigma = 0.2
# genrate
otherPara = getOtherPara(cond, stepDuration)
############# simulate for the distribution of toalEarnings ##########
nPara = 5
paraNames = c('phi', 'tau', 'gamma', 'lambda', 'wIni')
nValue = 3
nComb = nValue ^ nPara
initialSpace = matrix(NA, nValue^nPara, nPara)
initialSpace[,1] = rep(c(0.01, 0.05, 0.2), each = nValue^(nPara - 1)) # phi
initialSpace[,2] = rep(rep(seq(8, 24, 8), each = nValue), nValue^(nPara - 2)) # tau
initialSpace[,3] = rep(rep(seq(0.90, 0.98, 0.04), each = nValue^2), nValue^(nPara - 3))
initialSpace[,4] = rep(rep(seq(0.90, 0.98, 0.04), each = nValue^3), nValue^(nPara - 4))
initialSpace[,5] = rep(rep(seq(2, 8, 3), each = nValue^4), nValue^(nPara - 5))
save('initialSpace', 'nValue', 'nPara', 'paraNames', 'nComb',
file = 'outputs/QStarData/initialSpace.RData')
# set seed
set.seed(123)
# simualte
nRep = 5
tMax = otherPara[['tMax']]
TrialEarnings = array(dim = c(nValue^nPara, nRep, blockSecs / iti + 1))
RewardDelays = array(dim = c(nValue^nPara, nRep, blockSecs / iti + 1))
Ws = array(dim = c(nValue^nPara, nRep, tMax / stepDuration)) # diifferent from master
TimeWaited = array(dim = c(nValue^nPara, nRep, blockSecs / iti + 1))
vaQuits = array(dim = c(nValue^nPara, nRep, tMax / stepDuration, blockSecs / iti + 1))
vaWaits = array(dim = c(nValue^nPara, nRep, tMax / stepDuration, blockSecs / iti + 1))
for(i in 1 : 1:nrow(initialSpace)){
para = initialSpace[i,]
for(j in 1 : nRep ){
tempt=  QStarModel(para,otherPara, cond)
TrialEarnings[i, j,] = tempt[['trialEarnings']]
Ws[i, j,] = tempt[['ws']]
RewardDelays[i, j,] = tempt[['rewardDelays']]
TimeWaited[i, j, ] = tempt[['timeWaited']]
vaQuits[i, j,  , ] = tempt[['vaQuits']]
vaWaits[i, j, ,  ] = tempt[['vaWaits']]
}
}
# organize and save outputs
outputData = list("ws" = Ws, "timeWaited" = TimeWaited,
"rewardDelays" = RewardDelays, "trialEarnings" = TrialEarnings,
"vaWaits" = vaWaits, "vaQuits" = vaQuits
)
if(cond == "unif20"){
rawHPData = outputData
fileName = sprintf('outputs/%s/rawHPData.RData', outFile)
save(rawHPData,file = fileName)
}else rawLPData = outputData{
rawLPData = outputData
fileName = sprintf('outputs/%s/rawHPData.RData', outFile)
save(rawHPData,file = fileName)
}
}
if(cond == "unif20"){
rawHPData = outputData
fileName = sprintf('outputs/%s/rawHPData.RData', outFile)
save(rawHPData,file = fileName)
}else rawLPData = outputData{
rawLPData = outputData
fileName = sprintf('outputs/%s/rawHPData.RData', outFile)
save(rawHPData,file = fileName)
}
outFile = 'QStarData'
if(cond == "unif20"){
rawHPData = outputData
fileName = sprintf('outputs/%s/rawHPData.RData', outFile)
save(rawHPData,file = fileName)
}else rawLPData = outputData{
rawLPData = outputData
fileName = sprintf('outputs/%s/rawHPData.RData', outFile)
save(rawHPData,file = fileName)
}
# this simulation using average payoff
### output file ####
outFile = 'outputs/QStarData'
dir.create(outFile)
################## read data #################
# library
library('ggplot2')
library('dplyr')
library('tidyr')
source('model.R') # QStar model
source('subFxs/wtwSettings.R') # wtw settings for both HP and LP
# can't change
source('subFxs/paraFxs.R') # functions to get MSPara and otherPara from inputs and wtwSettings
# can change for different MS model, and
################ input ################
# cond input
for(condIdx in 1 : 2){
cond = conditions[condIdx];
condName = conditionNames[condIdx]
condColor = conditionColors[condIdx]
sprintf('Condition : %s %s', cond, condName)
# other input
stepDuration = 0.5
traceDecay = 0.985
sigma = 0.2
# genrate
otherPara = getOtherPara(cond, stepDuration)
############# simulate for the distribution of toalEarnings ##########
nPara = 5
paraNames = c('phi', 'tau', 'gamma', 'lambda', 'wIni')
nValue = 3
nComb = nValue ^ nPara
initialSpace = matrix(NA, nValue^nPara, nPara)
initialSpace[,1] = rep(c(0.01, 0.05, 0.2), each = nValue^(nPara - 1)) # phi
initialSpace[,2] = rep(rep(seq(8, 24, 8), each = nValue), nValue^(nPara - 2)) # tau
initialSpace[,3] = rep(rep(seq(0.90, 0.98, 0.04), each = nValue^2), nValue^(nPara - 3))
initialSpace[,4] = rep(rep(seq(0.90, 0.98, 0.04), each = nValue^3), nValue^(nPara - 4))
initialSpace[,5] = rep(rep(seq(2, 8, 3), each = nValue^4), nValue^(nPara - 5))
save('initialSpace', 'nValue', 'nPara', 'paraNames', 'nComb',
file = 'outputs/QStarData/initialSpace.RData')
# set seed
set.seed(123)
# simualte
nRep = 5
tMax = otherPara[['tMax']]
TrialEarnings = array(dim = c(nValue^nPara, nRep, blockSecs / iti + 1))
RewardDelays = array(dim = c(nValue^nPara, nRep, blockSecs / iti + 1))
Ws = array(dim = c(nValue^nPara, nRep, tMax / stepDuration)) # diifferent from master
TimeWaited = array(dim = c(nValue^nPara, nRep, blockSecs / iti + 1))
vaQuits = array(dim = c(nValue^nPara, nRep, tMax / stepDuration, blockSecs / iti + 1))
vaWaits = array(dim = c(nValue^nPara, nRep, tMax / stepDuration, blockSecs / iti + 1))
for(i in 1 : 1:nrow(initialSpace)){
para = initialSpace[i,]
for(j in 1 : nRep ){
tempt=  QStarModel(para,otherPara, cond)
TrialEarnings[i, j,] = tempt[['trialEarnings']]
Ws[i, j,] = tempt[['ws']]
RewardDelays[i, j,] = tempt[['rewardDelays']]
TimeWaited[i, j, ] = tempt[['timeWaited']]
vaQuits[i, j,  , ] = tempt[['vaQuits']]
vaWaits[i, j, ,  ] = tempt[['vaWaits']]
}
}
# organize and save outputs
outputData = list("ws" = Ws, "timeWaited" = TimeWaited,
"rewardDelays" = RewardDelays, "trialEarnings" = TrialEarnings,
"vaWaits" = vaWaits, "vaQuits" = vaQuits
)
outFile = 'QStarData'
if(cond == "unif20"){
rawHPData = outputData
fileName = sprintf('outputs/%s/rawHPData.RData', outFile)
save(rawHPData,file = fileName)
}else{
rawLPData = outputData
fileName = sprintf('outputs/%s/rawHPData.RData', outFile)
save(rawHPData,file = fileName)
}
}
rm(list = ls())
source('~/Documents/first_kick/wtw_individual/simPreprocess.R', echo=TRUE)
source('~/Documents/first_kick/wtw_individual_SDG/simGroupAnalysis.R', echo=TRUE)
rm(list = ls())
# this simulation using average payoff
### output file ####
outFile = 'outputs/QStarData'
dir.create(outFile)
################## read data #################
# library
library('ggplot2')
library('dplyr')
library('tidyr')
source('model.R') # QStar model
source('subFxs/wtwSettings.R') # wtw settings for both HP and LP
# can't change
source('subFxs/paraFxs.R') # functions to get MSPara and otherPara from inputs and wtwSettings
# can change for different MS model, and
################ input ################
# cond input
for(condIdx in 1 : 2){
cond = conditions[condIdx];
condName = conditionNames[condIdx]
condColor = conditionColors[condIdx]
sprintf('Condition : %s %s', cond, condName)
# other input
stepDuration = 0.5
traceDecay = 0.985
sigma = 0.2
# genrate
otherPara = getOtherPara(cond, stepDuration)
############# simulate for the distribution of toalEarnings ##########
nPara = 5
paraNames = c('phi', 'tau', 'gamma', 'lambda', 'wIni')
nValue = 3
nComb = nValue ^ nPara
initialSpace = matrix(NA, nValue^nPara, nPara)
initialSpace[,1] = rep(c(0.01, 0.05, 0.2), each = nValue^(nPara - 1)) # phi
initialSpace[,2] = rep(rep(seq(8, 24, 8), each = nValue), nValue^(nPara - 2)) # tau
initialSpace[,3] = rep(rep(seq(0.90, 0.98, 0.04), each = nValue^2), nValue^(nPara - 3))
initialSpace[,4] = rep(rep(seq(0.90, 0.98, 0.04), each = nValue^3), nValue^(nPara - 4))
initialSpace[,5] = rep(rep(seq(2, 8, 3), each = nValue^4), nValue^(nPara - 5))
save('initialSpace', 'nValue', 'nPara', 'paraNames', 'nComb',
file = 'outputs/QStarData/initialSpace.RData')
# set seed
set.seed(123)
# simualte
nRep = 5
tMax = otherPara[['tMax']]
TrialEarnings = array(dim = c(nValue^nPara, nRep, blockSecs / iti + 1))
RewardDelays = array(dim = c(nValue^nPara, nRep, blockSecs / iti + 1))
Ws = array(dim = c(nValue^nPara, nRep, tMax / stepDuration)) # diifferent from master
TimeWaited = array(dim = c(nValue^nPara, nRep, blockSecs / iti + 1))
vaQuits = array(dim = c(nValue^nPara, nRep, tMax / stepDuration, blockSecs / iti + 1))
vaWaits = array(dim = c(nValue^nPara, nRep, tMax / stepDuration, blockSecs / iti + 1))
for(i in 1 : 1:nrow(initialSpace)){
para = initialSpace[i,]
for(j in 1 : nRep ){
tempt=  QStarModel(para,otherPara, cond)
TrialEarnings[i, j,] = tempt[['trialEarnings']]
Ws[i, j,] = tempt[['ws']]
RewardDelays[i, j,] = tempt[['rewardDelays']]
TimeWaited[i, j, ] = tempt[['timeWaited']]
vaQuits[i, j,  , ] = tempt[['vaQuits']]
vaWaits[i, j, ,  ] = tempt[['vaWaits']]
}
}
# organize and save outputs
outputData = list("ws" = Ws, "timeWaited" = TimeWaited,
"rewardDelays" = RewardDelays, "trialEarnings" = TrialEarnings,
"vaWaits" = vaWaits, "vaQuits" = vaQuits
)
outFile = 'QStarData'
if(cond == "unif20"){
rawHPData = outputData
fileName = sprintf('outputs/%s/rawHPData.RData', outFile)
save(rawHPData,file = fileName)
}else{
rawLPData = outputData
fileName = sprintf('outputs/%s/rawHPData.RData', outFile)
save(rawHPData,file = fileName)
}
}
condIdx
cond
outFile = 'QStarData'
if(cond == "unif20"){
rawHPData = outputData
fileName = sprintf('outputs/%s/rawHPData.RData', outFile)
save(rawHPData,file = fileName)
}else{
rawLPData = outputData
fileName = sprintf('outputs/%s/rawHPData.RData', outFile)
save(rawLPData,file = fileName)
}
rm(list = ls())
source('~/Documents/first_kick/wtw_individual/simPreprocess.R', echo=TRUE)
# this simulation using average payoff
### output file ####
outFile = 'outputs/QStarData'
dir.create(outFile)
################## read data #################
# library
library('ggplot2')
library('dplyr')
library('tidyr')
source('model.R') # QStar model
source('subFxs/wtwSettings.R') # wtw settings for both HP and LP
# can't change
source('subFxs/paraFxs.R') # functions to get MSPara and otherPara from inputs and wtwSettings
# can change for different MS model, and
################ input ################
# cond input
for(condIdx in 1 : 2){
cond = conditions[condIdx];
condName = conditionNames[condIdx]
condColor = conditionColors[condIdx]
sprintf('Condition : %s %s', cond, condName)
# other input
stepDuration = 0.5
traceDecay = 0.985
sigma = 0.2
# genrate
otherPara = getOtherPara(cond, stepDuration)
############# simulate for the distribution of toalEarnings ##########
nPara = 5
paraNames = c('phi', 'tau', 'gamma', 'lambda', 'wIni')
nValue = 3
nComb = nValue ^ nPara
initialSpace = matrix(NA, nValue^nPara, nPara)
initialSpace[,1] = rep(c(0.01, 0.05, 0.2), each = nValue^(nPara - 1)) # phi
initialSpace[,2] = rep(rep(seq(8, 24, 8), each = nValue), nValue^(nPara - 2)) # tau
initialSpace[,3] = rep(rep(seq(0.90, 0.98, 0.04), each = nValue^2), nValue^(nPara - 3))
initialSpace[,4] = rep(rep(seq(0.90, 0.98, 0.04), each = nValue^3), nValue^(nPara - 4))
initialSpace[,5] = rep(rep(seq(2, 8, 3), each = nValue^4), nValue^(nPara - 5))
save('initialSpace', 'nValue', 'nPara', 'paraNames', 'nComb',
file = 'outputs/QStarData/initialSpace.RData')
# set seed
set.seed(123)
# simualte
nRep = 5
tMax = otherPara[['tMax']]
TrialEarnings = array(dim = c(nValue^nPara, nRep, blockSecs / iti + 1))
RewardDelays = array(dim = c(nValue^nPara, nRep, blockSecs / iti + 1))
Ws = array(dim = c(nValue^nPara, nRep, tMax / stepDuration)) # diifferent from master
TimeWaited = array(dim = c(nValue^nPara, nRep, blockSecs / iti + 1))
vaQuits = array(dim = c(nValue^nPara, nRep, tMax / stepDuration, blockSecs / iti + 1))
vaWaits = array(dim = c(nValue^nPara, nRep, tMax / stepDuration, blockSecs / iti + 1))
for(i in 1 : 1:nrow(initialSpace)){
para = initialSpace[i,]
for(j in 1 : nRep ){
tempt=  QStarModel(para,otherPara, cond)
TrialEarnings[i, j,] = tempt[['trialEarnings']]
Ws[i, j,] = tempt[['ws']]
RewardDelays[i, j,] = tempt[['rewardDelays']]
TimeWaited[i, j, ] = tempt[['timeWaited']]
vaQuits[i, j,  , ] = tempt[['vaQuits']]
vaWaits[i, j, ,  ] = tempt[['vaWaits']]
}
}
# organize and save outputs
outputData = list("ws" = Ws, "timeWaited" = TimeWaited,
"rewardDelays" = RewardDelays, "trialEarnings" = TrialEarnings,
"vaWaits" = vaWaits, "vaQuits" = vaQuits
)
outFile = 'QStarData'
if(cond == "unif20"){
rawHPData = outputData
fileName = sprintf('outputs/%s/rawHPData.RData', outFile)
save(rawHPData,file = fileName)
}else{
rawLPData = outputData
fileName = sprintf('outputs/%s/rawLPData.RData', outFile)
save(rawLPData,file = fileName)
}
}
source('~/Documents/first_kick/wtw_individual/simPreprocess.R', echo=TRUE)
source('~/Documents/first_kick/wtw_individual_SDG/simGroupAnalysis.R', echo=TRUE)
