library('tidyr')
source('model.R') # QStar model
source('subFxs/wtwSettings.R') # wtw settings for both HP and LP
# can't change
source('subFxs/paraFxs.R') # functions to get MSPara and otherPara from inputs and wtwSettings
# can change for different MS model, and
######## generate hdrData ######
# hdrData include otherPara, MSPara
# also nTimeStep and TraceValue
# therefore, no need to call getPara in later analysis anymore
stepDuration = 0.5
source("subFxs/paraFxs.R")
for(c in 1: 2){
cond = conditions[c]
otherPara = getOtherPara(cond, stepDuration)
hdrData = otherPara
hdrData$nTimeStep = hdrData$tMax / hdrData$stepDuration
if(cond == 'HP') hdrHPData= hdrData else  hdrLPData= hdrData
}
fileName = 'outputs/QStarData/hdrData.RData'
save(hdrHPData, hdrLPData, file = fileName)
################ input ################
# cond input
for(condIdx in 1 : 2){
cond = conditions[condIdx];
condColor = conditionColors[condIdx]
sprintf('Condition : %s %s', cond, cond)
# used to calculate Qwait iniials
trialTick = trialTicks[[cond]]
thisDelayPDF = rewardDelayPDF[[cond]]
nTicks = length(trialTick)
# other input
stepDuration = 0.5
# genrate
otherPara = getOtherPara(cond, stepDuration)
nTimeStep = otherPara$tMax / stepDuration
############# simulate for the distribution of toalEarnings ##########
nPara = 3
paraNames = c('phi', 'tau', 'gamma')
nValue = 5
nComb = nValue ^ nPara
initialSpace = matrix(NA, nValue^nPara, nPara)
initialSpace[,1] = rep(exp(seq(-4, -0.7, length.out = 5)), nValue^(nPara - 1)) # phi
initialSpace[,2] = rep(rep(seq(2, 22, length.out = 5), each = nValue), nValue^(nPara - 2)) # tau
initialSpace[,3] = rep(seq(0.8, 0.98, length.out = 5), each = nValue^2)
save('initialSpace', 'nValue', 'nPara', 'paraNames', 'nComb',
file = 'outputs/QStarData/initialSpace.RData')
# set seed
set.seed(123)
# simualte
nRep = 5
tMax = otherPara[['tMax']]
TrialEarnings = array(dim = c(nValue^nPara, nRep, blockSecs / iti + 1))
RewardDelays = array(dim = c(nValue^nPara, nRep, blockSecs / iti + 1))
Qwait = array(dim = c(nValue^nPara, nRep, tMax / stepDuration)) # diifferent from master
TimeWaited = array(dim = c(nValue^nPara, nRep, blockSecs / iti + 1))
vaQuits = array(dim = c(nValue^nPara, nRep, tMax / stepDuration, blockSecs / iti + 1))
vaWaits = array(dim = c(nValue^nPara, nRep, tMax / stepDuration, blockSecs / iti + 1))
for(i in 1 : nrow(initialSpace)){
para = initialSpace[i,]
# calculate wIni
r = - log(para[3]) / stepDuration
actionValueWaits = rep(0, nTicks)
for(k in 1 : nTicks){
actionValueWaits[k] = sum(tokenValue * exp(- (trialTick[k : nTicks] - trialTick[k]) * r)* thisDelayPDF[k : nTicks] / sum( thisDelayPDF[k : nTicks]))
}
wIni = mean(actionValueWaits)
for(j in 1 : nRep ){
tempt=  simulationModel(para,otherPara, cond, wIni)
TrialEarnings[i, j,] = tempt[['trialEarnings']]
Qwait[i, j,] = tempt[['Qwait']]
RewardDelays[i, j,] = tempt[['rewardDelays']]
TimeWaited[i, j, ] = tempt[['timeWaited']]
vaQuits[i, j,  , ] = tempt[['vaQuits']]
vaWaits[i, j, ,  ] = tempt[['vaWaits']]
}
}
# organize and save outputs
outputData = list("Qwait" = Qwait, "timeWaited" = TimeWaited,
"rewardDelays" = RewardDelays, "trialEarnings" = TrialEarnings,
"vaWaits" = vaWaits, "vaQuits" = vaQuits
)
outFile = 'QStarData'
if(cond == "HP"){
rawHPData = outputData
fileName = sprintf('outputs/%s/rawHPData.RData', outFile)
save(rawHPData,file = fileName)
}else{
rawLPData = outputData
fileName = sprintf('outputs/%s/rawLPData.RData', outFile)
save(rawLPData,file = fileName)
}
}
i
cond
# this simulation using average payoff
### output file ####
outFile = 'outputs/QStarData'
dir.create(outFile)
################## read data #################
# library
library('ggplot2')
library('dplyr')
library('tidyr')
source('model.R') # QStar model
source('subFxs/wtwSettings.R') # wtw settings for both HP and LP
# can't change
source('subFxs/paraFxs.R') # functions to get MSPara and otherPara from inputs and wtwSettings
# can change for different MS model, and
######## generate hdrData ######
# hdrData include otherPara, MSPara
# also nTimeStep and TraceValue
# therefore, no need to call getPara in later analysis anymore
stepDuration = 0.5
source("subFxs/paraFxs.R")
for(c in 1: 2){
cond = conditions[c]
otherPara = getOtherPara(cond, stepDuration)
hdrData = otherPara
hdrData$nTimeStep = hdrData$tMax / hdrData$stepDuration
if(cond == 'HP') hdrHPData= hdrData else  hdrLPData= hdrData
}
fileName = 'outputs/QStarData/hdrData.RData'
save(hdrHPData, hdrLPData, file = fileName)
################ input ################
# cond input
for(condIdx in 1 : 2){
cond = conditions[condIdx];
condColor = conditionColors[condIdx]
sprintf('Condition : %s %s', cond, cond)
# used to calculate Qwait iniials
trialTick = trialTicks[[cond]]
thisDelayPDF = rewardDelayPDF[[cond]]
nTicks = length(trialTick)
# other input
stepDuration = 0.5
# genrate
otherPara = getOtherPara(cond, stepDuration)
nTimeStep = otherPara$tMax / stepDuration
############# simulate for the distribution of toalEarnings ##########
nPara = 3
paraNames = c('phi', 'tau', 'gamma')
nValue = 5
nComb = nValue ^ nPara
initialSpace = matrix(NA, nValue^nPara, nPara)
initialSpace[,1] = rep(exp(seq(-4, -0.7, length.out = 5)), nValue^(nPara - 1)) # phi
initialSpace[,2] = rep(rep(seq(2, 22, length.out = 5), each = nValue), nValue^(nPara - 2)) # tau
initialSpace[,3] = rep(seq(0.8, 0.98, length.out = 5), each = nValue^2)
save('initialSpace', 'nValue', 'nPara', 'paraNames', 'nComb',
file = 'outputs/QStarData/initialSpace.RData')
# set seed
set.seed(123)
# simualte
nRep = 5
tMax = otherPara[['tMax']]
TrialEarnings = array(dim = c(nValue^nPara, nRep, blockSecs / iti + 1))
RewardDelays = array(dim = c(nValue^nPara, nRep, blockSecs / iti + 1))
Qwait = array(dim = c(nValue^nPara, nRep, tMax / stepDuration)) # diifferent from master
TimeWaited = array(dim = c(nValue^nPara, nRep, blockSecs / iti + 1))
vaQuits = array(dim = c(nValue^nPara, nRep, tMax / stepDuration, blockSecs / iti + 1))
vaWaits = array(dim = c(nValue^nPara, nRep, tMax / stepDuration, blockSecs / iti + 1))
for(h in 1 : nrow(initialSpace)){
para = initialSpace[i,]
# calculate wIni
r = - log(para[3]) / stepDuration
actionValueWaits = rep(0, nTicks)
for(k in 1 : nTicks){
actionValueWaits[k] = sum(tokenValue * exp(- (trialTick[k : nTicks] - trialTick[k]) * r)* thisDelayPDF[k : nTicks] / sum( thisDelayPDF[k : nTicks]))
}
wIni = mean(actionValueWaits)
for(j in 1 : nRep ){
tempt=  simulationModel(para,otherPara, cond, wIni)
TrialEarnings[h, j,] = tempt[['trialEarnings']]
Qwait[h, j,] = tempt[['Qwait']]
RewardDelays[h, j,] = tempt[['rewardDelays']]
TimeWaited[h, j, ] = tempt[['timeWaited']]
vaQuits[h, j,  , ] = tempt[['vaQuits']]
vaWaits[h, j, ,  ] = tempt[['vaWaits']]
}
}
# organize and save outputs
outputData = list("Qwait" = Qwait, "timeWaited" = TimeWaited,
"rewardDelays" = RewardDelays, "trialEarnings" = TrialEarnings,
"vaWaits" = vaWaits, "vaQuits" = vaQuits
)
outFile = 'QStarData'
if(cond == "HP"){
rawHPData = outputData
fileName = sprintf('outputs/%s/rawHPData.RData', outFile)
save(rawHPData,file = fileName)
}else{
rawLPData = outputData
fileName = sprintf('outputs/%s/rawLPData.RData', outFile)
save(rawLPData,file = fileName)
}
}
# this simulation using average payoff
### output file ####
outFile = 'outputs/QStarData'
dir.create(outFile)
################## read data #################
# library
library('ggplot2')
library('dplyr')
library('tidyr')
source('model.R') # QStar model
source('subFxs/wtwSettings.R') # wtw settings for both HP and LP
# can't change
source('subFxs/paraFxs.R') # functions to get MSPara and otherPara from inputs and wtwSettings
# can change for different MS model, and
######## generate hdrData ######
# hdrData include otherPara, MSPara
# also nTimeStep and TraceValue
# therefore, no need to call getPara in later analysis anymore
stepDuration = 0.5
source("subFxs/paraFxs.R")
for(c in 1: 2){
cond = conditions[c]
otherPara = getOtherPara(cond, stepDuration)
hdrData = otherPara
hdrData$nTimeStep = hdrData$tMax / hdrData$stepDuration
if(cond == 'HP') hdrHPData= hdrData else  hdrLPData= hdrData
}
fileName = 'outputs/QStarData/hdrData.RData'
save(hdrHPData, hdrLPData, file = fileName)
################ input ################
# cond input
for(condIdx in 1 : 2){
cond = conditions[condIdx];
condColor = conditionColors[condIdx]
sprintf('Condition : %s %s', cond, cond)
# used to calculate Qwait iniials
trialTick = trialTicks[[cond]]
thisDelayPDF = rewardDelayPDF[[cond]]
nTicks = length(trialTick)
# other input
stepDuration = 0.5
# genrate
otherPara = getOtherPara(cond, stepDuration)
nTimeStep = otherPara$tMax / stepDuration
############# simulate for the distribution of toalEarnings ##########
nPara = 3
paraNames = c('phi', 'tau', 'gamma')
nValue = 5
nComb = nValue ^ nPara
initialSpace = matrix(NA, nValue^nPara, nPara)
initialSpace[,1] = rep(exp(seq(-4, -0.7, length.out = 5)), nValue^(nPara - 1)) # phi
initialSpace[,2] = rep(rep(seq(2, 22, length.out = 5), each = nValue), nValue^(nPara - 2)) # tau
initialSpace[,3] = rep(seq(0.8, 0.98, length.out = 5), each = nValue^2)
save('initialSpace', 'nValue', 'nPara', 'paraNames', 'nComb',
file = 'outputs/QStarData/initialSpace.RData')
# set seed
set.seed(123)
# simualte
nRep = 5
tMax = otherPara[['tMax']]
TrialEarnings = array(dim = c(nValue^nPara, nRep, blockSecs / iti + 1))
RewardDelays = array(dim = c(nValue^nPara, nRep, blockSecs / iti + 1))
Qwait = array(dim = c(nValue^nPara, nRep, tMax / stepDuration)) # diifferent from master
TimeWaited = array(dim = c(nValue^nPara, nRep, blockSecs / iti + 1))
vaQuits = array(dim = c(nValue^nPara, nRep, tMax / stepDuration, blockSecs / iti + 1))
vaWaits = array(dim = c(nValue^nPara, nRep, tMax / stepDuration, blockSecs / iti + 1))
for(h in 1 : nrow(initialSpace)){
para = initialSpace[h,]
# calculate wIni
r = - log(para[3]) / stepDuration
actionValueWaits = rep(0, nTicks)
for(k in 1 : nTicks){
actionValueWaits[k] = sum(tokenValue * exp(- (trialTick[k : nTicks] - trialTick[k]) * r)* thisDelayPDF[k : nTicks] / sum( thisDelayPDF[k : nTicks]))
}
wIni = mean(actionValueWaits)
for(j in 1 : nRep ){
tempt=  simulationModel(para,otherPara, cond, wIni)
TrialEarnings[h, j,] = tempt[['trialEarnings']]
Qwait[h, j,] = tempt[['Qwait']]
RewardDelays[h, j,] = tempt[['rewardDelays']]
TimeWaited[h, j, ] = tempt[['timeWaited']]
vaQuits[h, j,  , ] = tempt[['vaQuits']]
vaWaits[h, j, ,  ] = tempt[['vaWaits']]
}
}
# organize and save outputs
outputData = list("Qwait" = Qwait, "timeWaited" = TimeWaited,
"rewardDelays" = RewardDelays, "trialEarnings" = TrialEarnings,
"vaWaits" = vaWaits, "vaQuits" = vaQuits
)
outFile = 'QStarData'
if(cond == "HP"){
rawHPData = outputData
fileName = sprintf('outputs/%s/rawHPData.RData', outFile)
save(rawHPData,file = fileName)
}else{
rawLPData = outputData
fileName = sprintf('outputs/%s/rawLPData.RData', outFile)
save(rawLPData,file = fileName)
}
}
View(rawLPData)
rm(list = ls())
source('~/Documents/first_kick/wtw_individual_SDG/simPreprocess.R')
rm(list = ls(0))
rm(list = ls())
############ load data and functions #########
# library
library("ggplot2")
library("dplyr")
library("tidyr")
library('scales')
source(file = './subFxs/plotThemes.R')
source(file = './subFxs/wtwSettings.R')
# load the para space of the simulation
load('outputs/QStarData/initialSpace.RData')
# load simulation data
load('outputs/QStarData/colpData.RData')
load('outputs/QStarData/rawWTW.RData')
load('outputs/QStarData/hdrData.RData')
# define output file
outFile = 'outputs/QStar_figures'
dir.create(outFile)
####### plot distribution of totalEarnings
plotData = data.frame(totalEarnings = c(colpHPData$totalEarnings, colpLPData$totalEarnings),
AUC = c(colpHPData$AUC, colpLPData$AUC),
condition = rep(c("HP", "LP"), each = nComb), phi = initialSpace[,1],
tau = initialSpace[,2], gamma = initialSpace[,3]
)
ggplot(plotData, aes(totalEarnings)) + geom_histogram(bins = 15) +
facet_wrap(~condition, nrow = 1) + xlab('Total earnings') + ylab("Num of simulations") + saveTheme + xlim(c(0, 600))
fileName = file.path(outFile, 'earningSml.pdf')
ggsave(fileName, width = 16, height = 8)
# calculate range
summarise(group_by(plotData, condition),
minEarning = min(totalEarnings),
maxEarning = max(totalEarnings))
############ summarise para effects on total earnings ###########
paraValues = 1:5
paraData = data.frame(condition = rep(c("HP", "LP"), each = nValue, nPara),
paraNames = rep(paraNames, each = nValue * 2),
paraValues = rep(paraValues, nPara * 2))
paraData$paraNames = factor(paraData$paraNames, levels = paraNames)
# summarise mu
muByPhi = summarise_at(group_by(plotData, condition, phi), vars(AUC:totalEarnings), mean)
muByTau = summarise_at(group_by(plotData, condition, tau), vars(AUC:totalEarnings), mean)
muByGamma = summarise_at(group_by(plotData, condition, gamma), vars(AUC:totalEarnings), mean)
# summarise sd
stdByPhi = summarise_at(group_by(plotData, condition, phi), vars(AUC:totalEarnings), sd)
stdByTau = summarise_at(group_by(plotData, condition, tau), vars(AUC:totalEarnings), sd)
stdByGamma = summarise_at(group_by(plotData, condition, gamma), vars(AUC:totalEarnings), sd)
#
mu = rbind(muByPhi, muByTau, muByGamma);
mu = mu[, 3:4]
std = rbind(stdByPhi, stdByTau, stdByGamma)
std = std[,3:4]
max= mu + std
min = mu -std
summaryEarnData = cbind(paraData, mu[,2], std[,2], max[,2], min[,2]);
summaryAUCData = cbind(paraData, mu[,1], std[,1], max[,1], min[,1]);
colnames(summaryEarnData) = c(colnames(paraData), 'mu', 'std', 'max', 'min')
colnames(summaryAUCData) = c(colnames(paraData), 'mu', 'std', 'max', 'min')
# plot
for(c in 1:2){
cond = conditions[c]
ggplot(summaryAUCData[summaryAUCData$condition == cond,], aes(factor(paraValues), mu)) +
geom_bar(stat = "identity", width=0.5, fill = conditionColors[c]) + geom_errorbar(aes(ymin = min, ymax = max), width=.2)+
facet_wrap(~paraNames, nrow = 1)+ saveTheme +
xlab("Parameter value") + ylab("AUC / s") + ggtitle(cond)
fileName = file.path(outFile, sprintf("paraAUCEffect%s.pdf", cond))
ggsave(fileName, width = 16, height = 8)
}
# plot
for(c in 1:2){
cond = conditions[c]
ggplot(summaryEarnData[summaryEarnData$condition == cond,], aes(factor(paraValues), mu)) +
geom_bar(stat = "identity", width=0.5, fill = conditionColors[c]) + geom_errorbar(aes(ymin = min, ymax = max), width=.2)+
facet_wrap(~paraNames, nrow = 1)+ saveTheme +
xlab("Parameter value") + ylab("Total Earnings") + ggtitle(cond)
fileName = file.path(outFile, sprintf("paraEarnEffect%s.pdf", cond))
ggsave(fileName, width = 16, height = 8)
}
######### plot AUC against totalEarnings #######
# prepare data
plotData = rbind(as.data.frame(colpHPData[c(1,3)]),
as.data.frame(colpLPData[c(1,3)]))
plotData$condition = rep(c('HP', 'LP'), each = length(colpHPData$totalEarnings))
plotData = plotData %>% arrange(totalEarnings) %>%group_by(condition) %>%
mutate(earningRank = rank(totalEarnings, ties.method = "first"))
# plot for LP
ggplot(plotData[plotData$condition == 'LP',], aes(AUC, totalEarnings)) + geom_point(size = 1.5) +
saveTheme + ylab('Total earnings') + xlim(c(0, tMaxs[2])) + ylim(c(0, 500))
fileName = file.path(outFile, "AUCLP_earningsLP.pdf")
ggsave(fileName, width = 6, height = 4)
# plot for HP
ggplot(plotData[plotData$condition == 'HP',], aes(AUC, totalEarnings)) + geom_point(size = 1.5) +
saveTheme + ylab('Total earnings') + xlim(c(0, tMaxs[1])) + ylim(c(0, 500))
fileName = file.path(outFile, "AUCHP_earningsHP.pdf")
ggsave(fileName, width = 6, height = 4)
######## plot the timeseries of wtw #######
meanValues = c(apply(rawWTW$HP, MARGIN = 3, FUN = mean),
apply(rawWTW$LP, MARGIN = 3, FUN = mean))
stdValues = c(apply(rawWTW$HP, MARGIN = 3, FUN = sd),
apply(rawWTW$LP, MARGIN = 3, FUN = sd))
plotData = data.frame(meanValues, stdValues,
time = rep(tGrid, time = 2),
condition = rep(c('HP', 'LP'), each = length(tGrid)),
minValues = meanValues - stdValues / sqrt(dim(rawWTW$HP)[1]),
maxValues = meanValues + stdValues / sqrt(dim(rawWTW$HP)[1]))
ggplot(plotData, aes(time, meanValues, color = condition)) +
geom_ribbon(data = plotData[plotData$condition == 'HP',], aes(ymin=minValues, ymax=maxValues),linetype=0, alpha = 0.1, color = "#bababa") +
geom_ribbon(data = plotData[plotData$condition == 'LP',], aes(ymin=minValues, ymax=maxValues),linetype=0, alpha = 0.1, color = "#bababa") +
geom_line(size = 1) + xlab('Time in block / s') + ylab('WTW / s') + saveTheme
fileName = file.path(outFile, "wtwTimeSeries.pdf")
ggsave(fileName, width = 12, height = 8)
########### plot HPAUC against LPAUC ##############
plotData = data.frame(HPAUC = colpHPData$AUC, LPAUC = colpLPData$AUC)
ggplot(plotData, aes(HPAUC, LPAUC)) + geom_point(shape = 3 ) + geom_smooth(method = lm) +
xlab('HP AUC/s') + ylab("LP AUC /s") + saveTheme
fileName = file.path(outFile, "HPAUC_LPAUC.pdf")
ggsave(fileName, width = 8, height = 8)
rm(list = ls(0))
rm(list = ls())
# this script analyzes the simulation data on the case level
###### load data and functions #######
source('subFxs/helperFxs.R')
library('ggplot2')
source('subFxs/plotThemes.R')
source('subFxs/wtwSettings.R')
source("subFxs/actionValueViewer.R")
load('outputs/QStarData/colpData.RData')
load('outputs/QStarData/initialSpace.RData')
load('outputs/QStarData/RawHPData.RData')
load('outputs/QStarData/RawLPData.RData')
condIdx = 2
cond = conditions[condIdx]
inputColp = if(cond == 'HP') inputColp = colpHPData else inputColp = colpLPData
inputRaw = if(cond == 'HP') inputRaw = rawHPData else inputRaw= rawLPData
tMax = tMaxs[condIdx]
trialTick = trialTicks[[condIdx]] # so here if use [2] then get a list
nCombList = which(inputColp$AUC >= 25)
# choose cases you want to plot
nCombList = which(inputColp$AUC >= 15)
nCombList
plotTrialData = T
plotKMSC= T
drawTimeSample = T
plotActionValue = T
# plot
for (nCb in 1 : length(nCombList)){
i = nCombList[nCb]
j = 1
# prepare total earnings, wtw and AUC
totalEarnings = inputColp$totalEarnings[i]
wtw = inputColp$wtw[i]
AUC = inputColp$AUC[i]
label = sprintf('colp stat, earn: %d, wtw: %.2f, AUC: %.2f',
totalEarnings, wtw, AUC)
# block data
blockData = data.frame(trialEarnings = inputRaw$trialEarnings[i,j,],
scheduledWait = inputRaw$rewardDelays[i,j,],
timeWaited = inputRaw$timeWaited[i,j,],
trialNum = 1 : length(inputRaw$timeWaited[i,j,])
)
waitDuration = blockData$timeWaited
waitDuration[is.na(waitDuration)] = blockData$scheduledWait[is.na(waitDuration)]
blockData$waitDuration = waitDuration
endTick = match(0, inputRaw$rewardDelays[i,j,]) - 1
blockData = blockData[1:endTick, ]
if(plotTrialData){
# plot
trialPlots(blockData, label)
}
if(plotTrialData) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# look at kmsc
if(plotKMSC){
# change name
rewardDelay = blockData$scheduledWait
quitIdx = (blockData$trialEarnings == 0)
kmscResults = kmscSimple(blockData$waitDuration, quitIdx, tMax, trialTick)
plotData = data.frame(pSurvival = kmscResults$kmOnGrid, time = trialTicks[[cond]])
p = ggplot(plotData, aes(time, pSurvival)) + geom_line() + ylim(c(0, 1)) + displayTheme +
ggtitle(label)
print(p)
}
if(plotKMSC) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# draw wait duration distribution
if(drawTimeSample){
# prepare pdf
cdf = 1 - kmscResults$kmOnGrid;
cdf[length(cdf)] = 1
pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
draws = sample(trialTicks[[cond]], size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram(bins = 50) + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)
print(p)
}
if(drawTimeSample) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# plot action value
# prepare data
if(plotActionValue){
para = initialSpace[i, ]
vaWaits = inputRaw$vaWaits[i,j, , ]
vaQuits = inputRaw$vaQuits[i,j, , ]
actionValueViewer(vaWaits, vaQuits, blockData, para)
}
if(plotActionValue) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
