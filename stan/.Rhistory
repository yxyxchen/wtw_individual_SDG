schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
fit <- stan(file = '8schools.stan', data = schools_dat)
print(fit)
plot(fit)
library(rstan)
schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
fit <- stan(file = '8schools.stan', data = schools_dat)
print(fit)
plot(fit)
file.rename("~/.R/Makevars", "~/.R/old_Makevars")
schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
fit <- stan(file = '8schools.stan', data = schools_dat)
print(fit)
plot(fit)
v
Compilation ERROR, function(s)/method(s) not created! In file included from file1bff50170204.cpp:8
file.edit("~/.R/Makevars")
file.edit("~/.R/Makevars")
library(rstan)
file.rename("~/.R/Makevars", "~/.R/old_Makevars")
Sys.setenv(USE_CXX14=1)
schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
fit <- stan(file = '8schools.stan', data = schools_dat)
print(fit)
plot(fit)
# load library
library(rstan)
Sys.setenv(USE_CXX14=1)
options(warn=-1, message =-1)
library(dplyr); library(ggplot2); library(rstan); library(reshape2)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
source('model.R')
source('subFxs/loadFxs.R')
source("subFxs/plotThemes.R")
source("subFxs/wtwSettings.R")
source('suBFxs/paraFxs.R')
# load all data
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
# select data
thisTrialData = trialData[[1]]
bkIdx = 1
thisBlockData = thisTrialData[thisTrialData$blockNum == bkIdx,]
# prepare arguments
thisCond = ifelse(unique(thisBlockData$condition) == 'HP', conditions[1], conditions[2])
waitDurations = thisBlockData$timeWaited
waitDurations[thisBlockData$trialEarnings == 5] = thisBlockData$scheduledWait[thisBlockData$trialEarnings == 5]
nTrial = nrow(thisBlockData)
inputData = list(nTrial = nTrial,
rewardDelays = thisBlockData$scheduledWait,
trialEarnings = thisBlockData$trialEarnings,
waitDurations = waitDurations
)
stepDuration = 0.5
otherPara = getOtherPara(thisCond, stepDuration)
source('model.R')
source('subFxs/loadFxs.R')
source("subFxs/plotThemes.R")
source("subFxs/wtwSettings.R")
source('suBFxs/paraFxs.R')
# load all data
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
# select data
thisTrialData = trialData[[1]]
bkIdx = 1
thisBlockData = thisTrialData[thisTrialData$blockNum == bkIdx,]
# input
sigma = 1
stepDuration = 0.5
waitRate = 0.9
rewardDelays = thisBlockData$scheduledWait
# toy stan model
test_string = "
functions {
vector action_rng(real waitRate, real stepDuration,vector rewardDelays, real sigma) {
vector[num_elements(rewardDelays)] action;
vector[num_elements(rewardDelays)] output;
real endStep;
real rewardDelay;
for(n in 1 : num_elements(rewardDelays)){
rewardDelay  = rewardDelays[n];
endStep = round(rewardDelay / stepDuration);
for(t in 1 : 10){
if(uniform_rng(0, 1) > waitRate ){
action[n] = 0;
break;
}
}
output[n] <- normal_rng(action[n], sigma);
}
return output;
}
}
data {
}
parameters {
}
model {
}
"
compiled_function <- stan_model(model_code = test_string) # you could use file = "path/to/yourfile.stan" if you have saved it as so
# And make the function available to the user in R
expose_stan_functions(compiled_function)
library(rstan)
Sys.setenv(USE_CXX14=1)
options(warn=-1, message =-1)
library(dplyr); library(ggplot2); library(rstan); library(reshape2)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# input
sigma = 1
stepDuration = 0.5
waitRate = 0.9
rewardDelays = thisBlockData$scheduledWait
# toy stan model
test_string = "
functions {
vector action_rng(real waitRate, real stepDuration,vector rewardDelays, real sigma) {
vector[num_elements(rewardDelays)] action;
vector[num_elements(rewardDelays)] output;
real endStep;
real rewardDelay;
for(n in 1 : num_elements(rewardDelays)){
rewardDelay  = rewardDelays[n];
endStep = round(rewardDelay / stepDuration);
for(t in 1 : 10){
if(uniform_rng(0, 1) > waitRate ){
action[n] = 0;
break;
}
}
output[n] <- normal_rng(action[n], sigma);
}
return output;
}
}
data {
}
parameters {
}
model {
}
"
compiled_function <- stan_model(model_code = test_string) # you could use file = "path/to/yourfile.stan" if you have saved it as so
library('ggplot2')
source('model.R')
source('subFxs/loadFxs.R')
source("subFxs/plotThemes.R")
source("subFxs/wtwSettings.R")
source('suBFxs/paraFxs.R')
# load all data
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
# select data
thisTrialData = trialData[[1]]
bkIdx = 1
thisBlockData = thisTrialData[thisTrialData$blockNum == bkIdx,]
# prepare arguments
thisCond = ifelse(unique(thisBlockData$condition) == 'HP', conditions[1], conditions[2])
waitDurations = thisBlockData$timeWaited
waitDurations[thisBlockData$trialEarnings == 5] = thisBlockData$scheduledWait[thisBlockData$trialEarnings == 5]
nTrial = nrow(thisBlockData)
inputData = list(nTrial = nTrial,
rewardDelays = thisBlockData$scheduledWait,
trialEarnings = thisBlockData$trialEarnings,
waitDurations = waitDurations
)
stepDuration = 0.5
otherPara = getOtherPara(thisCond, stepDuration)
library('ggplot2')
source('model.R')
source('subFxs/loadFxs.R')
source("subFxs/plotThemes.R")
source("subFxs/wtwSettings.R")
source('suBFxs/paraFxs.R')
library('ggplot2')
source('model.R')
source('subFxs/loadFxs.R')
source("subFxs/plotThemes.R")
source("subFxs/wtwSettings.R")
source('suBFxs/paraFxs.R')
# load all data
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
library('ggplot2')
source('model.R')
source('subFxs/loadFxs.R')
source("subFxs/plotThemes.R")
source("subFxs/wtwSettings.R")
source('suBFxs/paraFxs.R')
library('ggplot2')
source('model.R')
source('subFxs/loadFxs.R')
source("subFxs/plotThemes.R")
source("subFxs/wtwSettings.R")
source('suBFxs/paraFxs.R')
# load all data
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
# select data
thisTrialData = trialData[[1]]
bkIdx = 1
thisBlockData = thisTrialData[thisTrialData$blockNum == bkIdx,]
# prepare arguments
thisCond = ifelse(unique(thisBlockData$condition) == 'HP', conditions[1], conditions[2])
waitDurations = thisBlockData$timeWaited
waitDurations[thisBlockData$trialEarnings == 5] = thisBlockData$scheduledWait[thisBlockData$trialEarnings == 5]
nTrial = nrow(thisBlockData)
inputData = list(nTrial = nTrial,
rewardDelays = thisBlockData$scheduledWait,
trialEarnings = thisBlockData$trialEarnings,
waitDurations = waitDurations
)
stepDuration = 0.5
otherPara = getOtherPara(thisCond, stepDuration)
library('ggplot2')
source('model.R')
source('subFxs/loadFxs.R')
source("subFxs/plotThemes.R")
source("subFxs/wtwSettings.R")
source('suBFxs/paraFxs.R')
# load all data
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
# select data
thisTrialData = trialData[[1]]
bkIdx = 1
thisBlockData = thisTrialData[thisTrialData$blockNum == bkIdx,]
# prepare arguments
thisCond = ifelse(unique(thisBlockData$condition) == 'HP', conditions[1], conditions[2])
waitDurations = thisBlockData$timeWaited
waitDurations[thisBlockData$trialEarnings == 5] = thisBlockData$scheduledWait[thisBlockData$trialEarnings == 5]
nTrial = nrow(thisBlockData)
inputData = list(nTrial = nTrial,
rewardDelays = thisBlockData$scheduledWait,
trialEarnings = thisBlockData$trialEarnings,
waitDurations = waitDurations
)
stepDuration = 0.5
otherPara = getOtherPara(thisCond, stepDuration)
source('suBFxs/paraFxs.R')
source('subFxs/wtwSettings.R')
source('subFxs/model.R')
source('subFxs/paraFxs.R')
