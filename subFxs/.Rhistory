##### step 1: load hdrdata
dataDir = './data'
fileName = sprintf('%s/SDGdataset.cvs', dataDir)
hdrData = read.csv(fileName)
cat('Identified',nFiles,'header files.\n')
######## condition varibles #########
conditions = c("unif20", "pareto5")
conditionNames = c("HP", "LP")
conditionColors = c("#7b3294", "#008837")
######## timing variables ########
tMaxs = c(20, 40) # trial durations
blockMins = 7 # block duration in mins
blockSecs = blockMins * 60 # block duration in secs
iti = 2 # iti duration in secs
tGrid = seq(0, blockSecs, 0.1)
######### reward variable ########
tokenValue = 10 #value of the token
########## supporting vairbales ########
# time ticks within a trial for timeEarnings or wtw analysis
trialTicks = list(
'HP' = round(seq(0, tMaxs[1], by = 0.1), 1),
'LP' = round(seq(0, tMaxs[2], by = 0.1), 1)
)
(length(trialTicks$HP) - 1)
tMaxs[1] / (length(trialTicks$HP) - 1)
cumsum(tMaxs[1] / (length(trialTicks$HP) - 1) * trialTicks$HP)
tMaxs[1] / (length(trialTicks$HP) - 1) * trialTicks$HP
tMaxs[1] / (length(trialTicks$HP) - 1) * trialTicks$HP
k = 4
mu = 0
sigma = 2
1 - (1 + k(trialTicks - mu) / sigma) ^ (-1 / k)
k = 4
mu = 0
sigma = 2
1 - (1 + k(trialTicks - mu) / sigma) ^ (-1 / k)
1 - (1 + k * (trialTicks - mu) / sigma) ^ (-1 / k)
1 - (1 + k * (trialTicks - mu) / sigma) ^ (-1 / k)
trialTicks
(1 + k * (trialTicks - mu) / sigma) ^ (-1 / k)
1 - (1 + k * trialTicks / sigma) ^ (-1 / k)
trialTicks - mu
1 - (1 + k * (trialTicks$LP - mu) / sigma) ^ (-1 / k)
1 - LP(length(trialTicks$LP) - 1)
LP = 1 - (1 + k * (trialTicks$LP - mu) / sigma) ^ (-1 / k)
LP(length(trialTicks$LP)) = 1
length(trialTicks$LP)
LP = 1 - (1 + k * (trialTicks$LP - mu) / sigma) ^ (-1 / k)
LP(length(trialTicks$LP)) = 1
LP[length(trialTicks$LP)] = 1
rewardDelayCDF = list(
HP,
LP
)
k = 4
mu = 0
sigma = 2
HP = tMaxs[1] / (length(trialTicks$HP) - 1) * trialTicks$HP
LP = 1 - (1 + k * (trialTicks$LP - mu) / sigma) ^ (-1 / k)
LP[length(trialTicks$LP)] = 1
rewardDelayCDF = list(
HP,
LP
)
rewardDelayCDF
library('ggplot2')
plotData = data.frame(time = c(trialTicks$HP, trialTicks$LP),
cdf = c(rewardDelayCDF$HP, rewardDelayCDF$LP),
condition = c(rep('HP', length(trialTicks$HP)),
rep('LP', trialTicks$LP)))
length(trialTicks$HP)
plotData = data.frame(time = c(trialTicks$HP, trialTicks$LP),
cdf = c(rewardDelayCDF$HP, rewardDelayCDF$LP),
condition = c(rep('HP', length(trialTicks$HP)),
rep('LP', length(trialTicks$LP))))
c(rep('HP', length(trialTicks$HP)),
rep('LP', length(trialTicks$LP)))
c(rewardDelayCDF$HP, rewardDelayCDF$LP)
rewardDelayCDF = list(
HP,
LP
)
k = 4
mu = 0
sigma = 2
HP = tMaxs[1] / (length(trialTicks$HP) - 1) * trialTicks$HP
LP = 1 - (1 + k * (trialTicks$LP - mu) / sigma) ^ (-1 / k)
LP[length(trialTicks$LP)] = 1
rewardDelayCDF = list(
HP,
LP
)
plotData = data.frame(time = c(trialTicks$HP, trialTicks$LP),
cdf = c(rewardDelayCDF$HP, rewardDelayCDF$LP),
condition = c(rep('HP', length(trialTicks$HP)),
rep('LP', length(trialTicks$LP))))
rewardDelayCDF = list(
HP,
LP
)
k = 4
mu = 0
sigma = 2
HP = tMaxs[1] / (length(trialTicks$HP) - 1) * trialTicks$HP
LP = 1 - (1 + k * (trialTicks$LP - mu) / sigma) ^ (-1 / k)
LP[length(trialTicks$LP)] = 1
rewardDelayCDF = list(
HP = HP,
LP = LP
)
plotData = data.frame(time = c(trialTicks$HP, trialTicks$LP),
cdf = c(rewardDelayCDF$HP, rewardDelayCDF$LP),
condition = c(rep('HP', length(trialTicks$HP)),
rep('LP', length(trialTicks$LP))))
plotData
ggplot(plotData, aes(time, cdf, linetype = condition)) + geom_line()
tMaxs = c(20, 40) # trial durations
blockMins = 7 # block duration in mins
blockSecs = blockMins * 60 # block duration in secs
iti = 2 # iti duration in secs
tGrid = seq(0, blockSecs, 0.1)
tMaxs[1] / (length(trialTicks$HP) - 1)
trialTicks$HP
HP = 1 / (length(trialTicks$HP) - 1) * trialTicks$HP
1 / (length(trialTicks$HP) - 1) * trialTicks$HP
length(trialTicks$HP) -
length(trialTicks$HP) -
)
length(trialTicks$HP)
1 / (length(trialTicks$HP) - 1) * (0 : length(trialTicks$HP))
1 / (length(trialTicks$HP) - 1)
trialTicks$HP[-1]
trialTicks$HP[-1]
trialTicks$HP[-1]
HP = 1 / trialTicks$HP[length(trialTicks$HP)]  * trialTicks$HP
rewardDelayCDF = list(
HP = HP,
LP = LP
)
plotData = data.frame(time = c(trialTicks$HP, trialTicks$LP),
cdf = c(rewardDelayCDF$HP, rewardDelayCDF$LP),
condition = c(rep('HP', length(trialTicks$HP)),
rep('LP', length(trialTicks$LP))))
ggplot(plotData, aes(time, cdf, linetype = condition)) + geom_line()
source('plotTheme.R')
source('subFxs/plotTheme.R')
source('subFxs/plotThemes.R')
#source('plotTheme.R')
######## condition varibles #########
conditions = c("unif20", "pareto5")
conditionNames = c("HP", "LP")
conditionColors = c("#7b3294", "#008837")
######## timing variables ########
tMaxs = c(20, 40) # trial durations
blockMins = 7 # block duration in mins
blockSecs = blockMins * 60 # block duration in secs
iti = 2 # iti duration in secs
tGrid = seq(0, blockSecs, 0.1)
######### reward variable ########
tokenValue = 10 #value of the token
########## supporting vairbales ########
# time ticks within a trial for timeEarnings or wtw analysis
trialTicks = list(
'HP' = round(seq(0, tMaxs[1], by = 0.1), 1),
'LP' = round(seq(0, tMaxs[2], by = 0.1), 1)
)
########## additional  variables for optimal analysis ########
# CDF of reward delays: p(t_reward <= T)
k = 4
mu = 0
sigma = 2
HP = 1 / trialTicks$HP[length(trialTicks$HP)]  * trialTicks$HP
LP = 1 - (1 + k * (trialTicks$LP - mu) / sigma) ^ (-1 / k)
LP[length(trialTicks$LP)] = 1
rewardDelayCDF = list(
HP = HP,
LP = LP
)
library(ggplot2)
source('subFxs/plotThemes.R')
source('plotThemes.R')
library(ggplot2)
source('plotThemes.R')
plotData = data.frame(time = c(trialTicks$HP, trialTicks$LP),
cdf = c(rewardDelayCDF$HP, rewardDelayCDF$LP),
condition = c(rep('HP', length(trialTicks$HP)),
rep('LP', length(trialTicks$LP))))
ggplot(plotData, aes(time, cdf, linetype = condition)) + geom_line() + xlab('Elapsed time / s') +
ylab('CDF') + title('Timing conditions') + saveTheme
ggplot(plotData, aes(time, cdf, linetype = condition)) + geom_line() + xlab('Elapsed time / s') +
ylab('CDF') + ggtitle('Timing conditions') + saveTheme
dir.create('outputs/exp_figures')
dir.create('outputs')
dir.create('outputs/exp_figures')
plotData = data.frame(time = c(trialTicks$HP, trialTicks$LP),
cdf = c(rewardDelayCDF$HP, rewardDelayCDF$LP),
condition = c(rep('HP', length(trialTicks$HP)),
rep('LP', length(trialTicks$LP))))
ggplot(plotData, aes(time, cdf, linetype = condition)) + geom_line() + xlab('Elapsed time / s') +
ylab('CDF') + ggtitle('Timing conditions') + saveTheme
ggsave('outputs/exp_figures/timing_conditions.png', width = 6, height = 4)
getwd
getwd()
dir.create('./outputs')
dir.create('../outputs')
dir.create('../outputs/exp_figures')
ggsave('../outputs/exp_figures/timing_conditions.png', width = 6, height = 4)
ggsave('../outputs/exp_figures/timing_conditions.pdf', width = 0.6, height = 0.4)
library(ggplot2)
source('plotThemes.R')
plotData = data.frame(time = c(trialTicks$HP, trialTicks$LP),
cdf = c(rewardDelayCDF$HP, rewardDelayCDF$LP),
condition = c(rep('HP', length(trialTicks$HP)),
rep('LP', length(trialTicks$LP))))
ggplot(plotData, aes(time, cdf, linetype = condition)) + geom_line() + xlab('Elapsed time / s') +
ylab('CDF') + ggtitle('Timing conditions') + saveTheme
ggsave('../outputs/exp_figures/timing_conditions.png', width = 0.6, height = 0.4)
library(ggplot2)
source('plotThemes.R')
plotData = data.frame(time = c(trialTicks$HP, trialTicks$LP),
cdf = c(rewardDelayCDF$HP, rewardDelayCDF$LP),
condition = c(rep('HP', length(trialTicks$HP)),
rep('LP', length(trialTicks$LP))))
ggplot(plotData, aes(time, cdf, linetype = condition)) + geom_line() + xlab('Elapsed time / s') +
ylab('CDF') + ggtitle('Timing conditions') + saveTheme
ggsave('../outputs/exp_figures/timing_conditions.png', width = 3, height = 2)
library(ggplot2)
source('plotThemes.R')
plotData = data.frame(time = c(trialTicks$HP, trialTicks$LP),
cdf = c(rewardDelayCDF$HP, rewardDelayCDF$LP),
condition = c(rep('HP', length(trialTicks$HP)),
rep('LP', length(trialTicks$LP))))
ggplot(plotData, aes(time, cdf, linetype = condition)) + geom_line() + xlab('Elapsed time / s') +
ylab('CDF') + ggtitle('Timing conditions') + displayTheme
ggsave('../outputs/exp_figures/timing_conditions.png', width = 3, height = 2)
library(ggplot2)
source('plotThemes.R')
plotData = data.frame(time = c(trialTicks$HP, trialTicks$LP),
cdf = c(rewardDelayCDF$HP, rewardDelayCDF$LP),
condition = c(rep('HP', length(trialTicks$HP)),
rep('LP', length(trialTicks$LP))))
ggplot(plotData, aes(time, cdf, linetype = condition)) + geom_line() + xlab('Elapsed time / s') +
ylab('CDF') + ggtitle('Timing conditions') + saveTheme
ggsave('../outputs/exp_figures/timing_conditions.png', width = 3, height = 2)
source('plotThemes.R')
plotData = data.frame(time = c(trialTicks$HP, trialTicks$LP),
cdf = c(rewardDelayCDF$HP, rewardDelayCDF$LP),
condition = c(rep('HP', length(trialTicks$HP)),
rep('LP', length(trialTicks$LP))))
ggplot(plotData, aes(time, cdf, linetype = condition)) + geom_line() + xlab('Elapsed time / s') +
ylab('CDF') + ggtitle('Timing conditions') + saveTheme
library(ggplot2)
source('plotThemes.R')
plotData = data.frame(time = c(trialTicks$HP, trialTicks$LP),
cdf = c(rewardDelayCDF$HP, rewardDelayCDF$LP),
condition = c(rep('HP', length(trialTicks$HP)),
rep('LP', length(trialTicks$LP))))
ggplot(plotData, aes(time, cdf, linetype = condition)) + geom_line() + xlab('Elapsed time / s') +
ylab('CDF') + ggtitle('Timing conditions') + saveTheme
ggsave('../outputs/exp_figures/timing_conditions.png', width = 6, height = 4)
library(ggplot2)
source('plotThemes.R')
plotData = data.frame(time = c(trialTicks$HP, trialTicks$LP),
cdf = c(rewardDelayCDF$HP, rewardDelayCDF$LP),
condition = c(rep('HP', length(trialTicks$HP)),
rep('LP', length(trialTicks$LP))))
ggplot(plotData, aes(time, cdf, linetype = condition)) + geom_line() + xlab('Elapsed time / s') +
ylab('CDF') + ggtitle('Timing conditions') + saveTheme
ggsave('../outputs/exp_figures/timing_conditions.png', width = 6, height = 4)
library(ggplot2)
source('plotThemes.R')
plotData = data.frame(time = c(trialTicks$HP, trialTicks$LP),
cdf = c(rewardDelayCDF$HP, rewardDelayCDF$LP),
condition = c(rep('HP', length(trialTicks$HP)),
rep('LP', length(trialTicks$LP))))
ggplot(plotData, aes(time, cdf, linetype = condition)) + geom_line() + xlab('Elapsed time / s') +
ylab('CDF') + ggtitle('Timing conditions') + saveTheme
ggsave('../outputs/exp_figures/timing_conditions.png', width = 3, height = 2)
library(ggplot2)
source('plotThemes.R')
plotData = data.frame(time = c(trialTicks$HP, trialTicks$LP),
cdf = c(rewardDelayCDF$HP, rewardDelayCDF$LP),
condition = c(rep('HP', length(trialTicks$HP)),
rep('LP', length(trialTicks$LP))))
ggplot(plotData, aes(time, cdf, linetype = condition)) + geom_line() + xlab('Elapsed time / s') +
ylab('CDF') + ggtitle('Timing conditions') + saveTheme
ggsave('../outputs/exp_figures/timing_conditions.png', width = 3, height = 2)
library(ggplot2)
source('plotThemes.R')
plotData = data.frame(time = c(trialTicks$HP, trialTicks$LP),
cdf = c(rewardDelayCDF$HP, rewardDelayCDF$LP),
condition = c(rep('HP', length(trialTicks$HP)),
rep('LP', length(trialTicks$LP))))
ggplot(plotData, aes(time, cdf, linetype = condition)) + geom_line() + xlab('Elapsed time / s') +
ylab('CDF') + ggtitle('Timing conditions') + saveTheme
ggsave('../outputs/exp_figures/timing_conditions.png', width = 3, height = 2)
library(ggplot2)
source('plotThemes.R')
plotData = data.frame(time = c(trialTicks$HP, trialTicks$LP),
cdf = c(rewardDelayCDF$HP, rewardDelayCDF$LP),
condition = c(rep('HP', length(trialTicks$HP)),
rep('LP', length(trialTicks$LP))))
ggplot(plotData, aes(time, cdf, linetype = condition)) + geom_line() + xlab('Elapsed time / s') +
ylab('CDF') + ggtitle('Timing conditions') + saveTheme
ggsave('../outputs/exp_figures/timing_conditions.png', width = 3, height = 2)
library(ggplot2)
source('plotThemes.R')
plotData = data.frame(time = c(trialTicks$HP, trialTicks$LP),
cdf = c(rewardDelayCDF$HP, rewardDelayCDF$LP),
condition = c(rep('HP', length(trialTicks$HP)),
rep('LP', length(trialTicks$LP))))
ggplot(plotData, aes(time, cdf, linetype = condition)) + geom_line() + xlab('Elapsed time / s') +
ylab('CDF') + ggtitle('Timing conditions') + saveTheme
ggsave('../outputs/exp_figures/timing_conditions.png', width = 3, height = 2)
c(0, rep(1 / (length(trialTicks$HP) - 1), length(trialTicks$HP) - 1)
）
c(0, rep(1 / (length(trialTicks$HP) - 1), length(trialTicks$HP) - 1)))
c(0, rep(1 / (length(trialTicks$HP) - 1), length(trialTicks$HP) - 1))
diff(rewardDelayCDF$HP)
c(0, diff(rewardDelayCDF$LP))
trialTicks$HP * rewardDelayPDF$HP
#  make it discrete
HP = c(0, diff(rewardDelayCDF$HP))
LP = c(0, diff(rewardDelayCDF$LP))
rewardDelayPDF = list(
"HP" = HP,
"LP" = LP
)
trialTicks$HP * rewardDelayPDF$HP
cumsum(trialTicks$HP * rewardDelayPDF$HP)
rewardDelayPDF$HP
cumsum(trialTicks$HP * rewardDelayPDF$HP) / cumsum(rewardDelayPDF$HP)
cumsum(rewardDelayPDF$HP)
cumsum(rewardDelayPDF$HP)
cumsum(trialTicks$HP * rewardDelayPDF$HP) / cumsum(rewardDelayPDF$HP)
#  PDF of reward delays: p(t_reward = T)
#  make it discrete
# one unit less than CDF
HP = diff(rewardDelayCDF$HP)
LP = diff(rewardDelayCDF$LP)
rewardDelayPDF = list(
"HP" = HP,
"LP" = LP
)
HP = cumsum(trialTicks$HP * rewardDelayPDF$HP) / cumsum(rewardDelayPDF$HP)
cumsum(trialTicks$HP[2 : length(trialTicks$HP)] * rewardDelayPDF$HP) / cumsum(rewardDelayPDF$HP)
HP = cumsum(trialTicks$HP * rewardDelayPDF$HP) / cumsum(rewardDelayPDF$HP)
HP[1] = NA
#  PDF of reward delays: p(t_reward = T)
#  make it discrete
HP = c(0, diff(rewardDelayCDF$HP))
LP = c(0, diff(rewardDelayCDF$LP))
rewardDelayPDF = list(
"HP" = HP,
"LP" = LP
)
# E(t_reward | t_reward <= T)
HP = cumsum(trialTicks$HP * rewardDelayPDF$HP) / cumsum(rewardDelayPDF$HP)
HP[1] = NA
cumsum(trialTicks$LP * rewardDelayPDF$LP) / cumsum(rewardDelayPDF$LP)
# E(t_reward | t_reward <= T)
HP = cumsum(trialTicks$HP * rewardDelayPDF$HP) / cumsum(rewardDelayPDF$HP)
HP[1] = NaN
LP = cumsum(trialTicks$LP * rewardDelayPDF$LP) / cumsum(rewardDelayPDF$LP)
LP[1] = NaN
# no reward arrives before the first reward timing, so points before that turn to NAN
meanRewardDelay = list('HP' = HP, 'LP' = LP)
HP = tokenValue * rewardDelayCDF$HP /
(meanRewardDelay$HP * rewardDelayCDF$HP + trialTicks$HP * (1 - rewardDelayCDF$HP) + iti)
LP = tokenValue * rewardDelayCDF$LP /
(meanRewardDelay$LP * rewardDelayCDF$LP + trialTicks$LP * (1 - rewardDelayCDF$LP) + iti)
# quitting before the first reward timing get 0 reward
HP[which(is.nan(HP))] = 0
LP[which(is.nan(LP))] = 0
rewardRate = list('HP' = HP, 'LP' = LP)
optimWaitTimes = list()
optimWaitTimes$HP = trialTicks$HP[which.max(HP)]
optimWaitTimes$LP = trialTicks$LP[which.max(LP)]
optimWaitTimes
optimRewardRates = list()
optimRewardRates$HP = max(HP)
optimRewardRates$LP = max(LP)
# plot rewardRate
for(c in 1:2){
thisCond = conditionNames[c];
plotData = data.frame(rewardRate = rewardRate[[thisCond]],
waitThreshold = trialTicks[[thisCond]] )
opRewardRate = max(plotData$rewardRate);
opWaitThreshold = plotData$waitThreshold[which.max(plotData$rewardRate)]
opRewardRate * blockSecs
ggplot(plotData, aes(waitThreshold, rewardRate)) + geom_point(size = 1) +
geom_vline(xintercept = opWaitThreshold, size = 1, color = 'red', linetype  = 2) +
xlab('Wait threshold / s') + ylab('Reward rate') + saveTheme  + ggtitle(thisCond)
fileName = sprintf("figures/rewardRate%s.pdf", thisCond)
ggsave(fileName, width = 6, height = 4)
}
for(c in 1:2){
thisCond = conditionNames[c];
plotData = data.frame(rewardRate = rewardRate[[thisCond]],
waitThreshold = trialTicks[[thisCond]] )
opRewardRate = max(plotData$rewardRate);
opWaitThreshold = plotData$waitThreshold[which.max(plotData$rewardRate)]
opRewardRate * blockSecs
ggplot(plotData, aes(waitThreshold, rewardRate)) + geom_point(size = 1) +
geom_vline(xintercept = opWaitThreshold, size = 1, color = 'red', linetype  = 2) +
xlab('Wait threshold / s') + ylab('Reward rate') + saveTheme  + ggtitle(thisCond)
fileName = sprintf("../outputs/exp_figures/rewardRate%s.pdf", thisCond)
ggsave(fileName, width = 6, height = 4)
}
library(ggplot2)
source('plotThemes.R')
plotData = data.frame(time = c(trialTicks$HP, trialTicks$LP),
rewardRate = c(rewardRate$HP, rewardRate$LP),
condition = c(rep('HP', length(trialTicks$HP)),
rep('LP', length(trialTicks$LP))))
library(ggplot2)
source('plotThemes.R')
plotData = data.frame(time = c(trialTicks$HP, trialTicks$LP),
rewardRate = c(rewardRate$HP, rewardRate$LP),
condition = c(rep('HP', length(trialTicks$HP)),
rep('LP', length(trialTicks$LP))))
ggplot(plotData, aes(time, rewardRate, linetype = condition)) + geom_line() + xlab('Giving-up time /s') +
ylab('Total Earnings / cent') + ggtitle('Expected payoff functions') + saveTheme()
plotData = data.frame(time = c(trialTicks$HP, trialTicks$LP),
rewardRate = c(rewardRate$HP, rewardRate$LP),
condition = c(rep('HP', length(trialTicks$HP)),
rep('LP', length(trialTicks$LP))))
ggplot(plotData, aes(time, rewardRate, linetype = condition)) + geom_line() + xlab('Giving-up time /s') +
ylab('Total Earnings / cent') + ggtitle('Expected payoff functions') + saveTheme
plotData = data.frame(time = c(trialTicks$HP, trialTicks$LP),
rewardRate = c(rewardRate$HP, rewardRate$LP),
condition = c(rep('HP', length(trialTicks$HP)),
rep('LP', length(trialTicks$LP))))
ggplot(plotData, aes(time, rewardRate, linetype = condition)) + geom_line() + xlab('Giving-up time /s') +
ylab('Total Earnings / cent') + ggtitle('Expected payoff functions') + saveTheme
ggsave('../outputs/exp_figures/expected_payoff.png', width = 3, height = 2)
library(ggplot2)
source('plotThemes.R')
plotData = data.frame(time = c(trialTicks$HP, trialTicks$LP),
cdf = c(rewardDelayCDF$HP, rewardDelayCDF$LP),
condition = c(rep('HP', length(trialTicks$HP)),
rep('LP', length(trialTicks$LP))))
ggplot(plotData, aes(time, cdf, linetype = condition)) + geom_line() + xlab('Elapsed time / s') +
ylab('CDF') + ggtitle('Timing conditions') + saveTheme
ggsave('../outputs/exp_figures/timing_conditions.png', width = 3, height = 2)
rm(list = ls())
# this script analyze the experimental data
########### load data and functions ##########
# functions
source('subFxs/loadFxs.R')
source('subFxs/helperFxs.R')
source("subFxs/plotThemes.R")
source("subFxs/wtwSettings.R")
library("ggplot2")
library('dplyr')
# load all data
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
# list with a named element for each subject ID.
allIDs = hdrData$ID                   # column of subject IDs
n = length(allIDs)                    # n
cat('Analyzing data for n','=',n,'subjects.\n')
#
# control which individual-level plots to generate
plotTrialwiseData = F
plotKMSC = F
plotWTW = F
plotTimeEarnings = F
plotTrialEarnings =  F
# initialize outputs, organised by block
grpAUC = numeric(length =n * 2)
earningsByBlock = numeric(length= n * 2)
condByBlock = vector(length= n * 2)
stressByBlock = vector(length= n * 2)
wtw = matrix(NA, 9001, n * 2)
cumEarn = matrix(NA, 9001, n * 2)
# functions
source('subFxs/loadFxs.R')
source('subFxs/helperFxs.R')
source("subFxs/plotThemes.R")
source("subFxs/wtwSettings.R")
library("ggplot2")
library('dplyr')
